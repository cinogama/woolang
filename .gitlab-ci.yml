# In 'build', we will use cmake & make to build rscene..
variables:
  CACHE_FALLBACK_KEY: rs-build-master

build_release:
  stage: build
  script:
    - if [ ! -d build ]; then mkdir build; fi
    - cd build
    - rm -f CMakeCache.txt
    - cmake .. -DRS_MAKE_OUTPUT_IN_SAME_PATH=ON -DCMAKE_BUILD_TYPE=RELWITHDEBINFO -DBUILD_SHARED_LIBS=ON
    - make
    - cd ..
  artifacts:
    name: ubuntu-rs-build-release-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA
    paths:
      - build/rscenedriver
      - build/librscene.so
    expire_in: 1 week
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  cache:
    when: on_success
    key: rs-build-release-$CI_COMMIT_REF_SLUG
    paths:
        - "build/*"
  tags:
    - ubuntu1804_cicd

build_debug:
  stage: build
  script:
    - if [ ! -d build ]; then mkdir build; fi
    - cd build
    - rm -f CMakeCache.txt
    - cmake .. -DRS_MAKE_OUTPUT_IN_SAME_PATH=ON -DCMAKE_BUILD_TYPE=DEBUG -DBUILD_SHARED_LIBS=ON
    - make
    - cd ..
  artifacts:
    name: ubuntu-rs-build-debug-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA
    paths:
      - build/rscenedriver_debug
      - build/librscene_debug.so
    expire_in: 1 week
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  cache:
    when: on_success
    key: rs-build-debug-$CI_COMMIT_REF_SLUG
    paths:
        - "build/*"
  tags:
    - ubuntu1804_cicd

# run tests using the binary built before

test_debug_and_release:
  stage: test
  script:
    - ./build/rscenedriver test/test_all.rsn --coroutine-thread-count 2 --enable-ctrlc-debug 0
    - ./build/rscenedriver_debug test/test_all.rsn --coroutine-thread-count 2 --enable-ctrlc-debug 0
  tags:
    - ubuntu1804_cicd
  artifacts:
    name: "test-crash-core-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"
    paths:
      - core
    when: on_failure
    expire_in: 1 week
  dependencies:
    - build_release
    - build_debug
