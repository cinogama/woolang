# In 'build', we will use cmake & make to build woo..
variables:
  CACHE_FALLBACK_KEY: wo-build-master

build_release_win32:
  stage: build
  script:
    - echo "Build for ASan test -> %ENABLE_ASAN_TEST%"
    - git submodule update --init --recursive --force
    - if not exist build ( mkdir build )
    - cd build
    - del CMakeCache.txt
    - cmake .. -DWO_MAKE_OUTPUT_IN_SAME_PATH=ON -DCMAKE_BUILD_TYPE=RELWITHDEBINFO -DBUILD_SHARED_LIBS=ON
    - MSBuild driver/woodriver.vcxproj -p:Configuration=Release -m
    - cd ..
  artifacts:
    name: win32-wo-build-release-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA
    paths:
      - build/Release/woolang.exe
      - build/Release/libwoo.dll
    expire_in: 1 week
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  cache:
    when: on_success
    key: wo-build-release-win32-$CI_COMMIT_REF_SLUG
    paths:
        - "build/*"
  tags:
    - winserver22

build_release:
  stage: build
  script:
    - git submodule update --init --recursive --force
    - if [ ! -d build ]; then mkdir build; fi
    - cd build
    - rm -f CMakeCache.txt
    - cmake .. -DWO_MAKE_OUTPUT_IN_SAME_PATH=ON -DCMAKE_BUILD_TYPE=RELWITHDEBINFO -DBUILD_SHARED_LIBS=ON
    - make -j 4
    - cd ..
  artifacts:
    name: ubuntu-wo-build-release-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA
    paths:
      - build/woolang
      - build/libwoo.so
    expire_in: 1 week
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  cache:
    when: on_success
    key: wo-build-release-$CI_COMMIT_REF_SLUG
    paths:
        - "build/*"
  tags:
    - ubuntu20

build_release_arm64:
  stage: build
  script:
    - git submodule update --init --recursive --force
    - if [ ! -d build ]; then mkdir build; fi
    - cd build
    - rm -f CMakeCache.txt
    - cmake .. -DWO_MAKE_OUTPUT_IN_SAME_PATH=ON -DCMAKE_BUILD_TYPE=RELWITHDEBINFO -DBUILD_SHARED_LIBS=ON
    - make -j 4
    - cd ..
  artifacts:
    name: ubuntu-arm64-wo-build-release-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA
    paths:
      - build/woolang
      - build/libwoo.so
    expire_in: 1 week
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  cache:
    when: on_success
    key: wo-arm64-build-release-$CI_COMMIT_REF_SLUG
    paths:
        - "build/*"
  tags:
    - ubuntu22_arm64

build_release_arm64_mac:
  stage: build
  script:
    - git submodule update --init --recursive --force
    - if [ ! -d build ]; then mkdir build; fi
    - cd build
    - rm -f CMakeCache.txt
    - cmake .. -DWO_MAKE_OUTPUT_IN_SAME_PATH=ON -DCMAKE_BUILD_TYPE=RELWITHDEBINFO -DBUILD_SHARED_LIBS=ON
    - make -j 4
    - cd ..
  artifacts:
    name: mac-arm64-wo-build-release-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA
    paths:
      - build/woolang
      - build/libwoo.dylib
    expire_in: 1 week
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  cache:
    when: on_success
    key: wo-mac-arm64-build-release-$CI_COMMIT_REF_SLUG
    paths:
        - "build/*"
  tags:
    - mac-arm64

test_coverage_debug:
  stage: test
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  except: 
    - tags
  script:
    - sudo sysctl -p
    - ulimit -c unlimited
    - git submodule update --init --recursive --force
    - if [ ! -d build ]; then mkdir build; fi
    - cd build
    - rm -f CMakeCache.txt
    - cmake .. -DWO_MAKE_OUTPUT_IN_SAME_PATH=ON -DCMAKE_BUILD_TYPE=DEBUG -DBUILD_SHARED_LIBS=ON -DWO_BUILD_FOR_COVERAGE_TEST=ON -DWO_BUILD_FOR_ASAN_TEST=ON
    - make -j 4
    - cd ..
    # Begin coverage test
    - cd test
    - sudo baozi install -profile debug
    - sudo chmod -R 777 ./pkg
    - sudo chmod -R 777 .
    - ../build/woolang_debug ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 1 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - cd ../build/src/CMakeFiles/woolang.dir
    - sudo gcov -b -l -p -c *.gcno
    - cd ../../../../
    - pwd
    - sudo gcovr . -r ./src -g -k
    - sudo gcovr . -r ./src -g -k --html --html-details -o report.html
  artifacts:
    name: ubuntu-wo-coverage-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA
    paths:
      - build/woolang_debug
      - build/libwoo_debug.so
      - build/*.gcov
      - "*.html"
    expire_in: 1 week
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  cache:
    when: on_success
    key: wo-build-coverage-$CI_COMMIT_REF_SLUG
    paths:
        - "build/*"
  tags:
    - ubuntu20

test_debug_arm64:
  stage: test
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  script:
    - sudo sysctl -p
    - ulimit -c unlimited
    - git submodule update --init --recursive --force
    - if [ ! -d build ]; then mkdir build; fi
    - cd build
    - rm -f CMakeCache.txt
    - cmake .. -DWO_MAKE_OUTPUT_IN_SAME_PATH=ON -DCMAKE_BUILD_TYPE=DEBUG -DBUILD_SHARED_LIBS=ON
    - make -j 4
    - cd ..
    # Begin coverage test
    - cd test
    - sudo baozi install -profile debug
    - sudo chmod -R 777 ./pkg
    - sudo chmod -R 777 .
    - ../build/woolang_debug ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 1 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - cd ../../../../../
  artifacts:
    name: ubuntu-wo-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA
    paths:
      - build/woolang_debug
      - build/libwoo_debug.so
    expire_in: 1 week
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  cache:
    when: on_success
    key: wo-arm64-build-debug-$CI_COMMIT_REF_SLUG
    paths:
        - "build/*"
  tags:
    - ubuntu22_arm64

# run tests using the binary built before

test_release:
  stage: test
  except: 
    - tags
  script:
    - sudo sysctl -p
    - ulimit -c unlimited
    - cd test
    - sudo baozi install
    - sudo chmod -R 777 ./pkg
    - sudo chmod -R 777 .
    - ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 1 -o test_nojit.woo --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_nojit.woo --enable-ctrlc-debug 0 --enable-jit 0 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 0 -o test_nojit.woo --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_nojit.woo --enable-ctrlc-debug 0 --enable-jit 1 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 0 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 1 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - cd ..
  tags:
    - ubuntu20
  artifacts:
    name: "test-report-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"
    paths:
      - core
    when: on_failure
    expire_in: 1 week
  # cache:
  #   key: wo-build-debug-$CI_COMMIT_REF_SLUG
  #   policy: pull
  #   paths:
  #       - "build/*"
  dependencies:
    - build_release

test_release_arm64:
  stage: test
  script:
    - sudo sysctl -p
    - ulimit -c unlimited
    - cd test
    - sudo baozi install
    - sudo chmod -R 777 ./pkg
    - sudo chmod -R 777 .
    - ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 1 -o test_nojit.woo --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_nojit.woo --enable-ctrlc-debug 0 --enable-jit 0 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 0 -o test_nojit.woo --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_nojit.woo --enable-ctrlc-debug 0 --enable-jit 1 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 0 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 1 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - cd ..
  tags:
    - ubuntu22_arm64
  artifacts:
    name: "test-report-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"
    paths:
      - core
    when: on_failure
    expire_in: 1 week
  dependencies:
    - build_release_arm64

test_release_arm64_mac:
  stage: test
  script:
    - cd test
    - sudo baozi install
    - sudo chmod -R 777 ./pkg
    - sudo chmod -R 777 .
    - ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 1 -o test_nojit.woo --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_nojit.woo --enable-ctrlc-debug 0 --enable-jit 0 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 0 -o test_nojit.woo --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_nojit.woo --enable-ctrlc-debug 0 --enable-jit 1 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 0 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 1 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - cd ..
  tags:
    - mac-arm64
  artifacts:
    name: "test-report-mac-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"
    paths:
      - core
    when: on_failure
    expire_in: 1 week
  dependencies:
    - build_release_arm64_mac

test_memory_debug:
  stage: test
  only: 
    - tags
  script:
    - sudo sysctl -p
    - ulimit -c unlimited
    - git submodule update --init --recursive --force
    - if [ ! -d build ]; then mkdir build; fi
    - cd build
    - rm -f CMakeCache.txt
    - cmake .. -DWO_MAKE_OUTPUT_IN_SAME_PATH=ON -DCMAKE_BUILD_TYPE=DEBUG -DBUILD_SHARED_LIBS=ON
    - make -j 4
    - cd ..
    # Begin coverage test
    - cd test
    - sudo baozi install -profile debug
    - sudo chmod -R 777 ./pkg
    - sudo chmod -R 777 .
    - valgrind --tool=memcheck --leak-check=yes --show-reachable=yes ../build/woolang_debug ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 1 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - cd ..
  artifacts:
    name: ubuntu-wo-coverage-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA
    paths:
      - build/woolang_debug
      - build/libwoo_debug.so
    expire_in: 1 week
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  cache:
    when: on_success
    key: wo-build-coverage-$CI_COMMIT_REF_SLUG
    paths:
        - "build/*"
  tags:
    - ubuntu20

# run tests using the binary built before

test_memory_release:
  stage: test
  only: 
    - tags
  script:
    - sudo sysctl -p
    - ulimit -c unlimited
    - cd test
    - sudo baozi install
    - sudo chmod -R 777 ./pkg
    - sudo chmod -R 777 .
    - valgrind --tool=memcheck --leak-check=yes --show-reachable=yes ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 0 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - valgrind --tool=memcheck --leak-check=yes --show-reachable=yes ../build/woolang ./test_all.wo --enable-ctrlc-debug 0 --enable-jit 1 --enable-halt-when-panic 1 --mem-chunk-size 536870912
    - cd ..
  tags:
    - ubuntu20
  artifacts:
    name: "test-report-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"
    paths:
      - core
    when: on_failure
    expire_in: 1 week
  # cache:
  #   key: wo-build-debug-$CI_COMMIT_REF_SLUG
  #   policy: pull
  #   paths:
  #       - "build/*"
  dependencies:
    - build_release
    
