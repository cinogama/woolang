import rscene.std;
import test_tool;

namespace test_template
{
    func invokable<T>(var foo:T(T), var n:T)
    {
        return foo(n);
    }
    func fib<T>(var n:T)
    {
        if (n <= 2)
            return 1:T;
        return fib:<T>(n-1) + fib:<T>(n-2);
    }
    func diff_static<T>()
    {
        static var a = []:array<T>;
        return a;
    }

    func typename_of<T>()
    {
        const var _tmp = 0:T;

        if (_tmp is dynamic)
            return "dynamic";
        if (_tmp is int)
            return "int";
        if (_tmp is real)
            return "real";
        
        return "unknown";
    }

    func test_cost_time<T>()
    {
        var begin_time = std::time();
        var i = 0:T;
        while (i < 1_0000_0000:T)
            i += 1:T;
        var end_time = std::time();

        std::println(typename_of:<T>(), "cost:", end_time - begin_time, "sec.");
    }

    func cast_to<TO, FROM>(var val:FROM)
    {
        return val:TO;
    }

    func no_template_test()
    {
        return "no_template";
    }

    func no_template_test<T>()
    {
        return "has_template";
    }

    func no_template_first_test_1(var n:int)
    {
        return "no_template";
    }
    func no_template_first_test_1<T>(var n:T)
    {
        return "has_template";
    }

    func no_template_first_test_2(var n:int, var x:real)
    {
        return "no_template";
    }
    func no_template_first_test_2<T>(var n:T, var x:real)
    {
        return "has_template";
    }

    func no_template_first_test_3(var n:int, ...)
    {
        return "no_template";
    }
    func no_template_first_test_3<T>(var n:T, ...)
    {
        return "has_template";
    }

    func template_if_constexpr_test<T>()
    {
        if (0:T is real)
            return 1.25;
        else
            return 1;
    }

    func no_if_constexpr_test_1()
    {
        if (1)
            return 1.25;
        else
            return 1;
    }

    func no_if_constexpr_test_2()
    {
        if (0)
            return 1.25;
        else
            return 1;
    }

    func main()
    {
        test_equal(fib:<int>, fib:<int>);
        test_assure(fib:<int> != fib:<real>);

        test_assure(fib:<int> is int(int));
        test_assure(fib:<real> is real(real));

        test_assure(diff_static:<int>() is array<int>);
        test_assure(diff_static:<real>() is array<real>);
        test_assure(diff_static:<real>() != diff_static:<int>());

        var result = invokable(fib:<int>, 10);

        test_equal(result, 55);

        test_cost_time:<int>();
        test_cost_time:<real>();
        test_cost_time:<dynamic>();

        test_equal(cast_to:<string>(3)+".14159", "3.14159");

        test_equal(no_template_test(), "no_template");
        test_equal(no_template_first_test_1(0), "no_template");
        test_equal(no_template_first_test_2(0,0), "no_template");
        test_equal(no_template_first_test_3(0,233), "no_template");

        template_if_constexpr_test:<int>() as int;
        template_if_constexpr_test:<real>() as real;
        no_if_constexpr_test_1() as real;
        no_if_constexpr_test_2() as real;
    }
}

test_function("test_template.main", test_template::main);