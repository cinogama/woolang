import rscene.std;
import rscene.coroutine;

import test_tool;

namespace test_coroutine
{
	func main()
	{
		var vm = std::vm();

		vm->load_source(
		@"
		import rscene.std;
		import rscene.coroutine;

		var co_list = []:array<std::coroutine>;

		for(var i = 0; i < 10000; i += 1)
			co_list->add(std::coroutine(
				func()
				{
					while(true)
						std::coroutine::yield();
				}
			));

		std::println("coroutine ready!");
		std::sleep(3);
		std::println("shutting down coroutines!");

		for(var co : co_list)
		{
			co->abort();
		}
		std::println("over!");
		std::sleep(3);
		"@
		);

		vm->run();
		std::println("vm over!");
		std::sleep(3);
		std::println("close vm!");
		vm->close();


		var co1 = std::coroutine(func(){
			for (var i = 0; i < 10; i += 1)
			{
				std::println("co working:", i);
				std::coroutine::yield();
			}
		});

		while(!co1->completed())
			std::sleep(0.1);

		co1 = std::coroutine(func(){
			for (;;)
			{
				std::println("co working 1...");
			}
		});
		var co2 = std::coroutine(func(){
			for (;;)
			{
				std::println("co working 2...");
			}
		});

		std::coroutine::stop_all();

		co1 = std::coroutine(func(){
			for (var i = 0; i < 10; i += 1)
			{
				std::println("co working:", i);
				std::coroutine::yield();
			}
		});

		while(!co1->completed())
			std::sleep(0.1);
	}
}

test_function("test_coroutine.main", test_coroutine::main);