import woo.std;
import test_tool;

namespace test_basic
{
    func abs<T>(v:T)
    {
        if (v < 0:T) return -v;
        return v;
    }

    func main()
    {
        let mut a = 15;
        test_equal(a/3, 5);
        test_equal(a/4, 3);
        test_equal(a/5, 3);
        test_equal(a/6, 2);
        test_equal(a/7, 2);
        test_equal(a/8, 1);

        test_equal(a%3, 0);
        test_equal(a%4, 3);
        test_equal(a%5, 0);
        test_equal(a%6, 3);
        test_equal(a%7, 1);
        test_equal(a%8, 7);

        a += 1.75: int;
        test_equal(a, 16);
        a -= 0.75: int;
        test_equal(a, 16);
        a -= 1;
        test_equal(a, 15);

        test_assure(abs(1.2 * 5.0 - 6.0) < 0.0000000001);
        test_assure(abs(1.2 / 0.6 - 2.0) < 0.0000000001);
        test_assure(abs(1.2 % 0.6) < 0.0000000001);

        let mut x = 1.2;
        test_assure(abs(x * 5.0 - 6.0) < 0.0000000001);
        test_assure(abs(x / 0.6 - 2.0) < 0.0000000001);
        test_assure(abs(x % 0.6) < 0.0000000001);
        x += 1: real;
        test_assure(abs(x - 2.2) < 0.0000000001);

        let b = 15:dynamic;
        let h1 = 1230H :dynamic;
        let h2 = 7890H :dynamic;
        test_equal(a: int + b: int, 30);
        test_equal(h1: handle + h2: handle, 9120H);
        test_equal(h1: handle + 1.0: handle, 1231H);
        test_equal(h1: handle + 5: handle, 1235H);

        test_equal(h2: handle - h1: handle, 6660H);
        test_equal(h1: handle - 1.0: handle, 1229H);
        test_equal(h1: handle - 5: handle, 1225H);

        test_assure(abs(a:real * 0.2 - 3.) < 0.0000000001);
        test_assure(abs(a:real / 0.2 - 75.) < 0.0000000001);
    
        let mut p = 1;
        let mut q = 1.0;

        q = 75: real;
        q += 0.62;
        p = q: int;
        test_equal(p, 75);

        test_equal(q>1.0, true);
        test_equal(q>=1.0, true);
        test_equal(q<1.0, false);
        test_equal(q<=1.0, false);
        test_equal(q==1.0, false);
        test_equal(h1:real > q, true);
        test_equal(h1:real >= q, true);
        test_equal((h1:real) < q, false);
        test_equal(h1:real <= q, false);

        test_equal(p:handle, 75H);
        test_equal(q:handle, 75H);

        q += 1: real;
        p += q: int;
        test_equal(q:int, 76);

        p -= 151.0: int;
        test_equal(p, 0);

        test_assure(" "->isspace());
        test_assure(!"a"->isspace());
        test_assure("1"->isnumber());
        test_assure("1234"->isnumber());
        test_assure(!"1234a"->isnumber());
        test_assure("wo_test"->beginwith("wo_"));
        test_assure("wo_test"->endwith("_test"));
        test_equal("Hello, world"->replace("world", "woolang"), "Hello, woolang");
        
        let split_result = "a b  c d"->split("  ");
        test_equal(split_result->len(), 2);
        test_equal(split_result[0], "a b");
        test_equal(split_result[1], "c d");

        let m = {}: map<int, int>;
        m[0] = m[1] = m[2] = 233;
        test_equal(m[0], 233);
        test_equal(m[1], 233);
        test_equal(m[2], 233);
    }
}

test_function("test_basic.main", test_basic::main);
