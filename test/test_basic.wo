import woo.std;
import test_tool;

namespace test_basic
{
    func abs<T>(var v:T)
    {
        if (v < 0) return -v;
        return v;
    }

	func main()
	{
        var a = 15;
		test_equal(a/3, 5);
        test_equal(a/4, 3);
        test_equal(a/5, 3);
        test_equal(a/6, 2);
        test_equal(a/7, 2);
        test_equal(a/8, 1);

        test_equal(a%3, 0);
        test_equal(a%4, 3);
        test_equal(a%5, 0);
        test_equal(a%6, 3);
        test_equal(a%7, 1);
        test_equal(a%8, 7);

        test_assure(abs(1.2 * 5 - 6.0) < 0.0000000001);
        test_assure(abs(1.2 / 0.6 - 2.0) < 0.0000000001);
        test_assure(abs(1.2 % 0.6) < 0.0000000001);

        var x = 1.2;
        test_assure(abs(x * 5 - 6.0) < 0.0000000001);
        test_assure(abs(x / 0.6 - 2.0) < 0.0000000001);
        test_assure(abs(x % 0.6) < 0.0000000001);

        var b = 15:dynamic;
        var h1 = 1230H :dynamic;
        var h2 = 7890H :dynamic;
        test_equal(a+b, 30);
        test_equal(h1+h2, 9120H);
        test_equal(h1+1.0, 1231H);
        test_equal(h1+5, 1235H);

        test_equal(h2-h1, 6660H);
        test_equal(h1-1.0, 1229H);
        test_equal(h1-5, 1225H);

        test_assure(abs(a*0.2-3) < 0.0000000001);
        test_assure(abs(a/0.2-75) < 0.0000000001);
    
        var p = 1;
        var q = 1.0;

        q = 75;
        q += 0.62;
        p = q;
        test_equal(p, 75);

        test_equal(q>1.0, true);
        test_equal(q>=1.0, true);
        test_equal(q<1.0, false);
        test_equal(q<=1.0, false);
        test_equal(q==1.0, false);
        test_equal(h1>q, true);
        test_equal(h1>=q, true);
        test_equal(h1<q, false);
        test_equal(h1<=q, false);

        test_equal(p:handle, 75H);
        test_equal(q:handle, 75H);

        q += 1;
        p += q;
        test_equal(q:int, 76);

        p -= 151.0;
        test_equal(p, 0);

        test_assure(" "->isspace());
        test_assure(!"a"->isspace());
        test_assure("1"->isnumber());
        test_assure("1234"->isnumber());
        test_assure(!"1234a"->isnumber());
        test_assure("wo_test"->beginwith("wo_"));
        test_assure("wo_test"->endwith("_test"));
        test_equal("Hello, world"->replace("world", "woolang"), "Hello, woolang");
        
        var split_result = "a b  c d"->split("  ");
        test_equal(split_result->len(), 2);
        test_equal(split_result[0], "a b");
        test_equal(split_result[1], "c d");
	}
}

test_function("test_basic.main", test_basic::main);
