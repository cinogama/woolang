import woo::std;
import test_tool;

namespace test_operator_overload
{
    using SpString = string
    {
        func operator + (a: SpString, b:int)
        {
            return a: string + b: string;
        }
        func operator * (a: SpString, b:int)
        {
            let mut result = "";
            for (let mut i = 0; i<b; i+=1)
                result += a: string;
            return result;
        }
        func operator /(a, b)
        {
            std::println("Helloworld~");
            return a: string + "/" + b;
        }
        func operator %(a, b)
        {
            return (a + b: int): SpString;
        }
    }
    
    func bar()
    {
        std::println("foo called~");

        return struct{m=mut "dsa": SpString};
    }

    func main()
    {
        test_equal("Hello": SpString + 25, "Hello25");
        test_equal("Hello": SpString * 3, "HelloHelloHello");

        let mut str = "example";
        str = str: SpString + 123;
        test_equal(str, "example123");

        let mut spstr = str: SpString;
        spstr %= 321;
        test_equal(spstr: string, "example123321");

        let state = std::mutable::create(0);
        let structdat = struct{m = mut "data_struct": SpString};
        let foo = func(){state->set(state->get + 1); return structdat;};

        foo().m %= foo().m: string;
        test_equal(structdat.m: string, "data_struct0");
        test_equal(state->get, 2);

        let mut v = 856;
        foo().m %= 123 * v;
        test_equal(structdat.m: string, "data_struct0105288");
        test_equal(state->get, 3);
        
        test_equal((bar().m %:= 133): string, "dsa133");
        test_equal("abc": SpString / "111", "abc/111");
        test_equal("abc": SpString / ("111": SpString + 5), "abc/1115");

        let mut a = "654": SpString;
        a %= 321;
        test_equal((a %:= \=789;()): string, "654321789");
        test_equal(a: string, "654321789");
    }
}

test_function("test_operator_overload.main", test_operator_overload::main);