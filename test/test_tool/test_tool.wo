import woo.std;
import woo.debug;

using test_func_pair = struct{
    name: string,
    function: ()=>void,
};
let test_function_set = []:array<test_func_pair>;
let mut test_success_count = 0, mut test_failed_count = 0;

public func test_function(func_name:string, test_func:()=>void)
{
    test_function_set->add(test_func_pair{
            name = func_name,
            function = test_func,
        });
}

public func execute_all_test()
{
    let mut i = 0;
    while (i < test_function_set->len())
    {
        test_success_count = 0;
        test_failed_count = 0;
        std::println("Testing:", test_function_set[i].name, "...");

        test_function_set[i].function();

        std::println("Passed:", test_success_count);
        if (test_failed_count != 0)
        {
            std::println("Failed:", test_failed_count);
            std::panic("This test case has been failed...");
        }

        i+=1;
    }
}

private func _test_compare<AT, BT>(a: AT, b :BT)
    where (a is string) && (b is string);
{
    return a == b;
}
private func _test_compare<AT, BT>(a: AT, b :BT)
    where !(a is string) || !(b is string);
{
    return std::equalbyte(a, b);
}

public func test_equal<AT, BT>(a: AT, b: BT)
{
    let result = _test_compare(a, b);

    if(result)
        test_success_count += 1;
    else
    {
        test_failed_count += 1;
        std::println("Test fail:", a, " != ", b, ",but it should be equal.");
        std::println(std::debug::callstack(8));
    }
}

public func test_assure(a: bool)
{
    if (a)
        test_success_count += 1;
    else
    {
        test_failed_count += 1;
        std::println("Test fail:", a, " is not true..");
        std::println(std::debug::callstack(8));
    }
}