import woo.std;
import woo.debug;

using test_func_pair = struct{
    name: string,
    function: void(),
};
var test_function_set = []:array<test_func_pair>;
var test_success_count = 0, test_failed_count = 0;

func test_function(var func_name:string, var test_func:void())
{
    test_function_set->add(test_func_pair{
            name = func_name,
            function = test_func,
        });
}

func execute_all_test()
{
    var i = 0;
    while (i < test_function_set->len())
    {
        test_success_count = 0;
        test_failed_count = 0;
        std::println("Testing:", test_function_set[i].name, "...");

        test_function_set[i].function();

        std::println("Passed:", test_success_count);
        if (test_failed_count != 0)
        {
            std::println("Failed:", test_failed_count);
            std::panic("This test case has been failed...");
        }

        i+=1;
    }
}

func test_equal<AT, BT>(var a: AT, var b: BT)
{
    if (a: dynamic == b: dynamic)
        test_success_count += 1;
    else
    {
        test_failed_count += 1;
        std::println("Test fail:", a, " != ", b, ",but it should be equal.");
        std::println(std::debug::callstack(8));
    }
}

func test_assure(var a: bool)
{
    if (a)
        test_success_count += 1;
    else
    {
        test_failed_count += 1;
        std::println("Test fail:", a, " is not true..");
        std::println(std::debug::callstack(8));
    }
}