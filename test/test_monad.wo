import woo::std;
import test_tool;

namespace test_monad
{
    using State<S, A> = (S)=> (A, S)
    {
        func ret<S, A>(x: A)
        {
            return \s: S = (x, s);: State<S, A>;
        }
        func bind<S, A, B>(self: State<S, A>, f: (A)=> State<S, B>)
        {
            return \s: S = f(a)(s)
                where (a, _) = self(s);: State<S, B>;
        }

        let get<S> = \s: S = (s, s);: State<S, S>;
        func put<S>(s1: S)
        {
            return \_: S = ((), s1);: State<S, ()>;
        }
    }

    func addone()
    {
        return State::get:<int>
            =>> \a = State::put(a+1)
                =>> \_ = State::ret:<int>(a+1);
            ;
        ;
    }

    namespace parsermonad
    {
        using Parser<State, R> = (State)=>option<(R, State)>
        {
            public func create<State, R>(_parser: (State)=>option<(R, State)>)
            {
                return _parser: Parser<State, R>;
            }
            public func pure<State, R>(v: R)
            {
                return Parser::create(\s: State = option::value((v, s)););
            }
            public func fail<State>()
            {
                return Parser::create(\_/*s*/: State = option::none: option<(nothing, State)>;);
            }

            public func parse<State, R>(self: Parser<State, R>, s: State)
            {
                return self(s)
                    ->> \r_and_state = r_and_state[0] as R;
                    ;
            }
            public func bind<State, R, B>(self: Parser<State, R>, f: (R)=>Parser<State, B>)
            {
                return Parser::create(
                    \s: State = self(s)
                        =>> \r_and_state = f(r_and_state[0])(r_and_state[1]);
                    ;
                );
            }
            public func map<State, R, B>(self: Parser<State, R>, f: (R)=>B)
            {
                return self
                        =>> \x = pure:<State>(f(x));
                        ;
            }
            public func combine<State, R, B, C>(self: Parser<State, R>, p: Parser<State, B>, f: (R, B)=> C)
            {
                return self
                        =>> \a = p
                            =>> \b = pure:<State>(f(a, b));
                            ;
                    ;
            }

            public func skip<State, R, B>(self: Parser<State, R>, p: Parser<State, B>)
            {
                return self->combine(p, \a, _ = a;);
            }
            public func use<State, R, B>(self: Parser<State, R>, p: Parser<State, B>)
            {
                return self->combine(p, \_, b = b;);
            }
            public func or<State, R>(self: Parser<State, R>, p: Parser<State, R>)
            {
                return Parser::create(
                    \s: State = self(s)
                        -> or_bind(\= p(s);) 
                    ;
                );
            }
            public func many<State, R>(self: Parser<State, R>)=> Parser<State, array<R>>
            {
                return Parser::create(
                    \s: State = self(s)
                        =>> func(r_and_state)
                            {
                                match (self->many()(r_and_state[1]))
                                {
                                value((rr, ss))?
                                    return value((rr->inlay(0, r_and_state[0]), ss));
                                none?
                                    return none;
                                }
                            } 
                        ->  or_bind(\= option::value(([], s));)
                    ;
                );
            }
            public func some<State, R>(self: Parser<State, R>)
            {
                return self->combine(self->many, \x, xs = xs->inlay(0, x););
            }
            public let id<State> = Parser::create(\s: State = s->next;);
        }

        using State = struct{
            source_text: string,
            source_text_length: int,
            next_ch_index: int,
        }
        {
            public func create(src: string)
            {
                return State{
                    source_text = src,
                    source_text_length = src->len,
                    next_ch_index = 0,
                };
            }
            public func next(self: State)=> option<(char, State)>
            {
                if (self.next_ch_index >= self.source_text_length)
                    return option::none;
                return option::value((self.source_text[self.next_ch_index], 
                    State{
                        source_text = self.source_text,
                        source_text_length = self.source_text_length,
                        next_ch_index = self.next_ch_index + 1,
                    }));
            }
        }

        let pred = 
            \p: (char)=> bool = Parser::id:<State>
                =>> \c = p(c) ? Parser::pure:<State>(c) | Parser::fail:<State>();
            ;
        ;
        let ch = \tc: char = pred(\c = c == tc;);;
        let digit = pred(\c = c->is_number;)->>\c = (c - '0'): int;;
        let nat = digit->some()->> func(xs){let mut result = 0; for(let n: xs)result = result * 10 + n; return result;};
        let integer = ch('-')->use(nat)->>\x = -x;->or(nat);
    }

    
    func main()
    {
        let m = addone()
            =>> \a = State::put(a * 2)
                =>> \_ = State::ret:<int>(a * 2);
            ;
        ;

        let (v, s) = m(7);

        test_assure(v == 16 && s == 7);

        let m2 = option::value(12.5);
        let m3 = m2
            =>> \r = option::value(r: int);
            ;
        test_assure(m3->unwrap == 12);

        let state_a = parsermonad::State::create("-25a");
        test_assure(parsermonad::integer->parse(state_a)->unwrap == -25);

        let state_b = parsermonad::State::create("a-25");
        test_assure(parsermonad::integer->parse(state_b)->is_value == false);
    }
}
test_function("test_monad.main", test_monad::main);
