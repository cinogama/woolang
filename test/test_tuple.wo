import woo::std;
import test_tool;

namespace test_tuple
{
    using st1 = struct {
        a: string,
        b: real,
    };

    func test_construct_tuple()
    {
        let v = []mut: vec<int>;
        let foo = func(n: int){v->add(n); return n;};

        let t = (foo(1), foo(2), foo(3));

        test_equal(v[0], 1);
        test_equal(v[1], 2);
        test_equal(v[2], 3);

        test_equal(t[0], 1);
        test_equal(t[1], 2);
        test_equal(t[2], 3);
    }

    func main()
    {
        test_construct_tuple();

        let x = (1, 2.2, "Helloworld");
        let s = st1 { a = x[2] as string, b = x[1] as real };
        let w = (s, 1, 2);
        let l = w as (st1, int, int);
        let all = (x, s, w, l);

        test_assure(all[3][0].a == x[2]);
        test_assure(x[0] == 1);
        test_assure(x[2] == "Helloworld");

        let (_, _, c, _) = all;
        test_assure(c[0].a == x[2]);

        let (_, _, (m0, _, _), _) = all;
        test_assure(m0.a == c[0].a);
    }
}

test_function("test_tuple.main", test_tuple::main);