import woo::std;
import test_tool;

namespace test_bool
{
    func foo_true(val: bool)
    {
        test_assure(val== true);
    }
    func foo_false(val: bool)
    {
        test_assure(val == false);
    }
    func main()
    {
        let mut a = 5:bool;
        test_assure(a == true);
        test_assure(a != false);

        test_assure(!(12: bool) == false);
        test_assure(!a == false);
        test_assure(!(256: bool) == false);

        let mut dynx = nil: dynamic;
        test_assure(dynx is bool == false);

        dynx = true as bool: dynamic;
        test_assure(dynx is bool);

        dynx = (!(dynx as bool)): dynamic;
        test_assure(dynx is bool);

        dynx = 233: dynamic;
        test_assure(dynx is bool == false);

        dynx = dynx as int: bool: dynamic;
        test_assure(dynx is bool);
        test_assure(1 == dynx->unsafe::cast:<int>); // Holy shit! type will not realy cast, 
                                                      // But equb ignored it !

    }
}

test_function("test_bool.main", test_bool::main);
