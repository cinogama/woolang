import woo.std;
import test_tool;

namespace test_hkt
{
    func test_tval_is_spec_type<AT, T>(x: T)
    {
        return x as AT;
    }

    func finalize_hkt_func<HKT>()
    {
    }

    func get_finalize_hkt_func<AHKT>()
    {
        return finalize_hkt_func:<AHKT>;
    }

    func get_finalize_hkt_func_2<BHKT>()
    {
        return get_finalize_hkt_func:<BHKT>();
    }
  
    func test_complex_types()
    {
        using MyT<T> = typeof(std::declval:<T>() is int ? std::declval:<()=>MyT<real>>() | std::declval:<int>());
        let yf = option::none: option<MyT<int>>;
        test_assure(yf->val()() is MyT<real>);
    }

    func main()
    {
        let p = [0]mut;
        p->copy([]mut);
        p->copy([]);

        alias ArrInt_T = array<int>;
        let x = ([1, 2, 3] as ArrInt_T) as array<int>;

        test_tval_is_spec_type:<ArrInt_T>(x);
        test_tval_is_spec_type:<array<int>>(x);

        alias MyArr_T<VT> = array<VT>;
        alias SpArr_T<VT> = array<VT>;

        test_equal(get_finalize_hkt_func_2:<MyArr_T>(), get_finalize_hkt_func:<MyArr_T>());
        test_equal(get_finalize_hkt_func_2:<MyArr_T>(), get_finalize_hkt_func:<SpArr_T>());
        test_equal(get_finalize_hkt_func_2:<SpArr_T>(), get_finalize_hkt_func:<MyArr_T>());

        test_equal(finalize_hkt_func:<MyArr_T>, get_finalize_hkt_func:<MyArr_T>());
        test_equal(finalize_hkt_func:<MyArr_T>, get_finalize_hkt_func_2:<SpArr_T>());
        test_equal(finalize_hkt_func:<SpArr_T>, get_finalize_hkt_func:<MyArr_T>());

        test_equal(get_finalize_hkt_func_2:<MyArr_T>(), finalize_hkt_func:<MyArr_T>);
        test_equal(get_finalize_hkt_func:<MyArr_T>(), finalize_hkt_func:<SpArr_T>);
        test_equal(get_finalize_hkt_func_2:<SpArr_T>(), finalize_hkt_func:<MyArr_T>);

        test_complex_types();
    }
}

test_function("test_hkt.main", test_hkt::main);
