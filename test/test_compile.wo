import woo.std;
import woo.vm;

import test_tool;

namespace test_compile
{
    func compile_program(src: string)=> (bool, std::vm)
    {
        let vmm = std::vm::create();
        let result = vmm->load_source("test_compile/test_tmp_script.wo", src);
        
        return (result, vmm);
    }
    func assure_compile_success(src: string)
    {
        let (success, vm) = compile_program(src);
        if (!success)
            std::println(vm->error_msg());

        test_assure(success);

        vm->close();
    }
    func assure_compile_fail(src: string)
    {
        let (success, vm) = compile_program(src);
        test_assure(!success);
        
        vm->close();
    }

    func main()
    {
        let begin_tm = std::time();

        std::println("Compile 1000 vm!");

        for (let mut i=0; i<1000; i+=1)
        {
            assure_compile_success(@"
                import woo.std;
                func demo<T>(val: T)
                {
                    return "Hello" + val: string;
                }
                func main()
                {
                    demo("world");
                    demo(123);
                    demo(1.72);
                    demo(0x0000H);
                }
            "@);
        }
        let end_time = std::time();
        std::println("Compile 1000 src cost:", end_time - begin_tm);
    }
}

test_function("test_compile.main", test_compile::main);
