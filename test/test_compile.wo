import woo.std;
import woo.vm;

import test_tool;

namespace test_compile
{
    func compile_program(src: string): bool
    {
        let vmm = std::vm::create();
        let result = vmm->load_source("test_compile/test_tmp_script.wo", src);
        
        vmm->close();
        return result;
    }
    func assure_compile_success(src: string)
    {
        test_assure(compile_program(src));
    }
    func assure_compile_fail(src: string)
    {
        test_assure(!compile_program(src));
    }

    func main()
    {
        let begin_tm = std::time();
        for (let i=0; i<1000; i+=1)
        {
            assure_compile_success(@"
            import woo.std;
            func demo<T>(val: T)
            {
                return "Hello" + val: string;
            }
            func main()
            {
                demo("world");
                demo(123);
                demo(1.72);
                demo(0x0000H);
            }
            "@);
        }
        let end_time = std::time();
        std::println("Compile 1000 src cost:", end_time - begin_tm);

        // Empty source will failed.
        assure_compile_fail(@""@);

        // Cannot cast nil
        assure_compile_fail(@"let a = nil: gchandle;"@);

        // Cannot add different types
        assure_compile_fail(@"let b = "" + 2;"@);
        assure_compile_fail(@"let b = 1 + 2.0;"@);
        assure_compile_fail(@"let b = 0x00H + 128;"@);

        // match must walk through all cases
        assure_compile_fail(@"
        union MyUnion
        {
            A,B,C,D,E
        }
        let x = MyUnion::A;
        match(x)
        {
            A?;
            B?;
            C?;
        }
        "@);

        // Invalid match
        assure_compile_fail(@"let m = 1;match(m){ option::value(i)?; }"@);
        assure_compile_fail(@"let m = nil;match(m){ option::none(i)?; }"@);
        assure_compile_fail(@"import woo.std; let m = option::value(1); match(m){ option::none(i)?; }"@);
        assure_compile_fail(@"import woo.std; let m = option::value(1); match(m){ option::value(i)?; option::value(x)?; }"@);
        assure_compile_fail(@"import woo.std; let m = option::value(1); match(m){ option::none(i)?; option::value(x)?; }"@);

        // Construct struct must complete.
        assure_compile_fail(@"
            using st = struct{a: int, b: real};
            st{a = 15};
        "@);
        assure_compile_fail(@"let t = int{a = ""};"@);
        assure_compile_fail(@"let t = y{a = ""};"@);

        // Template args must match
        assure_compile_fail(@"func foo<T,U>(){} foo:<int>();"@);

        // extern symbol must be found 
        assure_compile_fail(@"extern("not_exist_func")func foo(): void;"@);
        assure_compile_fail(@"extern("not_exist_lib","not_exist_func")func foo(): void;"@);

        // return must in func
        assure_compile_fail(@"return 0;"@);

        // func cannot return different type if func is not dynamic
        assure_compile_fail(@"func xx(){return 1; return 1.0;}"@);

        // func cannot return different type from marked type
        assure_compile_fail(@"func xx: void(){return 1;}"@);
        assure_compile_fail(@"func xx: int(){return 1.;}"@);
        assure_compile_fail(@"func xx: void(){return 1;}"@);

        // unknown type/identifier is invalid
        assure_compile_fail(@"let x = 1: noexist; let y = x;"@);
        assure_compile_fail(@"let x = 0; y = x;"@);
        assure_compile_fail(@"noexist(1,2,3);"@);

        // Only index struct by const str
        assure_compile_fail(@"
            using st = struct{a: int}; 
            let s = st{a = 1}; 
            let i = "a"; 
            let b = s[i];
        "@);

        // Only index struct by const str
        assure_compile_fail(@"
            using st = struct{a: int}; 
            let s = st{a = 1}; 
            let i = "a"; 
            let b = s[i];
        "@);

        // Cannot index unindexable type or invalid index
        assure_compile_fail(@"let a = 5; let b = a[7];"@);
        assure_compile_fail(@"let a = [1]; let b = a["index"];"@);
        assure_compile_fail(@"
            using st = struct{a: int};
            let s = st{a = 15};
            let b = s.b;
        "@);
        assure_compile_fail(@"
            using st = struct{a: int};
            let s = st{a = 15};
            let b = s[0];
        "@);

        // Call fail
        assure_compile_fail(@"func foo(a:int, let b: string){} foo(1);"@);
        assure_compile_fail(@"func foo(a:int, let b: string){} foo(1., "");"@);
        assure_compile_fail(@"func foo(a:int, let b: string){} foo(1, "", 1);"@);
        assure_compile_fail(@"let a = 1; a();"@);
        assure_compile_fail(@"
            func operator == (a: array<int>, let b: array<int>): string{return "Helloworld";}
            let a = 1; let b = (a == 1) as string;
        "@);

        // Logic op only accept bool
        assure_compile_fail(@"let r = 1 || false;"@);
        assure_compile_fail(@"let r = 1 || 0;"@);
        assure_compile_fail(@"let r = true || 0;"@);
        assure_compile_fail(@"let r = 1 && 0;"@);
        assure_compile_fail(@"let r = 1 && false;"@);
        assure_compile_fail(@"let r = true && 0;"@);
        assure_compile_fail(@"let r = !0;"@);

        // relationship op cannot work at map/array/struct...
        assure_compile_fail(@"let r = [] < [];"@);
        assure_compile_fail(@"let r = {} >= {};"@);
        assure_compile_fail(@"let r = func(){} == [];"@);
        assure_compile_fail(@"union x{a,b}; let r = x::a == x::b;"@);

        // if/while/for only accept bool
        assure_compile_fail(@"if (0){}"@);
        assure_compile_fail(@"while (0){}"@);
        assure_compile_fail(@"for (;0;){}"@);

        // invalid export
        assure_compile_fail(@"extern func foo(){} extern func foo(a:int){}"@);

        // redefine
        assure_compile_fail(@"let a = 0; let a = 1;"@);
        assure_compile_fail(@"func a(){} let a = 1;"@);
        assure_compile_fail(@"using a = int; let a = 1;"@);

        // invalid index of tuple
        assure_compile_fail(@"let a = (1,2); a[5] = 6;"@);
        assure_compile_fail(@"let a = (1,2); a[-1] = 6;"@);

        // invalid type of tuple
        assure_compile_fail(@"let a = (1, 3, ["Hello"]); a[2] = [1];"@);
        assure_compile_fail(@"let a = (1, 3, ["Hello"]); a[1] = 1.2;"@);

        // invalid match for tuple
        assure_compile_fail(@"let (a, b) = (1,);"@);
        assure_compile_fail(@"let (a, b) = (1, 2, 3);"@);
        assure_compile_fail(@"import woo.std; match(option::value((1, 2))){option::value((a,))?;option::none?;}"@);
    }
}

test_function("test_compile.main", test_compile::main);