import woo.std;
import test_tool;

import woo.thread;

namespace test_thread
{
    let summ_mtx = std::spin::create();
    let mut summ = 0;

    let created_threads = []mut: vec<std::thread>;

    const let thread_count = 4;

    func main()
    {
        let mut i = 0;
        while (i<thread_count)
        {
            created_threads->add(
                std::thread::create(
                    func(id:int)
                    {
                        let mut c = 0;
                        while (c<10_000_000)
                        {
                            summ_mtx->lock();
                            summ += 1;
                            summ_mtx->unlock();

                            c+=1;
                        }
                        std::println("Thread:", id, "complete");
                    }, (i,)     
            ));
            i+=1;
        }

        std::println("OK! Waiting to end..");

        i = 0;
        while (i<thread_count)
        {
            created_threads[i]->wait();
            i+=1;
        }
        std::println("Result:", summ);
        test_equal(summ, 10_000_000 * thread_count);

        // Thread should be abort-able..
        summ = 0;
        let mut this_should_be_true = false;
        let __pack = [mut ref this_should_be_true]mut;
        let th = std::thread::create(
            func(ref i: int)
            {
                __pack[0] = true;
                while (i <= 1_0000_0000)
                {
                    i+=1;
                }
            }, (ref summ,));
        std::sleep(0.2);
        th->abort();
        th->wait();

        test_assure(this_should_be_true && summ!=0 && summ<1_0000_0000);
    }
}

test_function("test_thread.main", test_thread::main);