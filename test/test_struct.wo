import woo::std;
import test_tool;

namespace test_struct
{
    using chstruct<T> = struct{
        a: string,
        b: mut T
    };
    using mystruct<T> = struct{
        a: int,
        b: string,
        c: real,
        d: chstruct<string>,
        e: chstruct<T>
    };
    using normalstruct = struct {
        a : mut int,
        b : mut bool,
    };
    using autojudge = struct {
        f: (int)=>string,
    };

    func test_construct_struct()
    {
        let v = []mut: vec<int>;
        let foo = func(n: int){v->add(n); return n;};

        using St = struct{a: int, b: int, c: int};
        let s = St{a = foo(1), c = foo(3), b = foo(2)};

        test_equal(v[0], 1);
        test_equal(v[1], 2);
        test_equal(v[2], 3);

        test_equal(s.a, 1);
        test_equal(s.b, 2);
        test_equal(s.c, 3);
    }

    func test_raw_struct_1(a: bool)
    {
        if (a)
            return struct{a = [], b = [3.14]};
        else
            return struct{a = ["Helloworld"], b = []};
    }

    func test_raw_struct_2<T>(dat: struct{a: T, b: array<T>})
    {
        return dat;
    }

    func main()
    {
        test_construct_struct();

        let j = autojudge{f = \i=i:string;};
        test_equal(j.f(233666), "233666");

        func foo()
        {
            return 233;
        }
        let n = normalstruct{a=mut 0, b=mut false};
        n.a = foo() as int;
        n.b = foo() is int;

        let result = (test_raw_struct_1 as (bool)=>struct{a: array<string>, b: array<real>}) (false);
        test_equal(result.a[0], "Helloworld");

        test_equal(test_raw_struct_2(struct{a = "", b = ["Helloworld"]}).b[0], "Helloworld");
        test_equal(test_raw_struct_2(struct{a = 128, b = [1,3,5,7,9]}).b[3], 7);

        test_equal(n.a, 233);
        test_equal(n.b, true);

        let x = mystruct:<string>{
            a = 233,
            b = "Helloworld",
            c = 3.14,
            d = chstruct:<string>{ a = "d", b = mut "dval" },
            e = chstruct:<string>{ a = "e", b = mut "eval" },
        } ;
        
        do x as mystruct<string>;
        
        test_equal(x.a, 233);
        test_equal(x.b, "Helloworld");
        test_equal(x.c, 3.14);
        test_equal(x.d.a, "d");
        test_equal(x.d.b, "dval");
        test_equal(x.e.a, "e");
        test_equal(x.e.b, "eval");
        x.d.b = x.e.b;
        test_equal(x.d.b, "eval");
    }
}

test_function("test_struct.main", test_struct::main);
