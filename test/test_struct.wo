import woo.std;
import test_tool;

namespace test_struct
{
    using chstruct<T> = struct{
        a: string,
        mut b: T
    };
    using mystruct<T> = struct{
        a: int,
        b: string,
        c: real,
        d: chstruct<string>,
        e: chstruct<T>
    };
    using normalstruct = struct {
        mut a : int,
        mut b: bool,
    };
    using autojudge = struct {
        f: (int)=>string,
    };
    func main()
    {
        let j = autojudge{f = \i=i:string;};
        test_equal(j.f(233666), "233666");

        func foo()
        {
            return 233;
        }
        let n = normalstruct{a=mut 0, b=mut false};
        do n.a = foo() as int;
        do n.b = foo() is int;

        test_equal(n.a, 233);
        test_equal(n.b, true);

        let x = mystruct:<string>{
            a = 233,
            b = "Helloworld",
            c = 3.14,
            d = chstruct:<string>{ a = "d", b = mut "dval" },
            e = chstruct:<string>{ a = "e", b = mut "eval" },
        } ;
        
        do x as mystruct<string>;
        
        test_equal(x.a, 233);
        test_equal(x.b, "Helloworld");
        test_equal(x.c, 3.14);
        test_equal(x.d.a, "d");
        test_equal(x.d.b, "dval");
        test_equal(x.e.a, "e");
        test_equal(x.e.b, "eval");
        do x.d.b = x.e.b;
        test_equal(x.d.b, "eval");
    }
}

test_function("test_struct.main", test_struct::main);
