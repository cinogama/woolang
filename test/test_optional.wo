import woo.std;
import test_tool;

namespace test_optional
{
    var global_val<T> = []: array<T>;

    func foo()
    {
        test_assure(global_val:<int>->len() == 0);
        test_assure(global_val:<string>->len() == 1);
        test_assure(global_val:<string>[0] == "Helloworld");
    }

    func main()
    {
        var p<T> = 0: T;

        p:<real> = 128.0; 
        test_assure(p:<int> == 0);

        p:<int> += 5;
        test_assure(p:<real> == 128.0);

        p:<handle> = 0x147H;
        test_assure(p:<int> == 5);
        test_assure(p:<handle> == 0x147H);

        var g = global_val:<string> as array<string>;
        g->add("Helloworld");

        foo();

        var gval = option::none:<array<string>>;
        gval = option::value([]: array<string>);

        match(gval)
        {
            option::value(x)?
            {
                x as array<string>;
                x->add("Helloworld");
                x[0] as string;
                test_assure(x->len() == 1);
            }
            option::none?
                std::panic("Here should not be 'none'.");
        }

        var a = option::value("Hello");
        var b = a->map(func(var v: string){return v + "world"});
        match(b)
        {
            option::value(x)?
                test_assure(x == "Helloworld");
            option::none?
                std::panic("Here should not be 'none'.");
        }
        var c = option::none:<string>;
        var d = c->map(func(var x: string){std::panic("That's should not been exec.");
                                       return "That's should not been exec."});
        match(d)
        {
            option::value(x)?
                std::panic("Here should not be 'value'.");
            option::none?
                ;/* ok do nothing */
        }
    }
}

test_function("test_optional.main", test_optional::main);
