import woo::std;
import test_tool;

import pkg::iterator;

namespace test_optional
{
    let global_val<T> = []mut: vec<T>;

    func foo()
    {
        test_assure(global_val:<int>->len() == 0);
        test_assure(global_val:<string>->len() == 1);
        test_assure(global_val:<string>[0] == "Helloworld");

        let x = option::value(233);
        let y = option::none: option<int>;
        let m = {[1] = x, [2] = y};

        match(m->get(1)=>>\elem = elem;)
        {
            value(v)? test_assure(v as int == 233);
            none? test_assure(false);
        }
        match(m->get(2)=>>\elem = elem;)
        {
            value(_)? test_assure(false);
            none? ;
        }
    }

    
    union linknode<T> {
        next((T, linknode<T>)),
        end,
    }
    namespace linknode
    {
        func dup<T>(self: linknode<T>)=> linknode<T>
        {
            match(self)
            {
            next((elem, nextnode))?
                return next((elem, nextnode->dup()));
            end?
                return end;
            }
        }
        func add<T>(self: linknode<T>, addelem: T)=> linknode<T>
        {
            match(self)
            {
            next((elem, nextnode))?
                return next((elem, add(nextnode, addelem)));
            end?
                return next((addelem, end));
            }
        }
        func create<T>(val: array<T>)
        {
            let mut result = linknode::end : linknode<T>;
            for (let elem : val)
                result = result->add(elem);
            return result;
        }

        using iterator<T> = struct{
            node : mut linknode<T>
        };
        namespace iterator
        {
            public func next<T>(self: iterator<T>)
            {
                match(self.node)
                {
                next((elem, nextnode))?
                {
                    self.node = nextnode;
                    return option::value(elem);
                }
                end?
                    return option::none;
                }
            }
        }

        public func iter<T>(self: linknode<T>)
        {
            return iterator:<T>{ node = mut self };
        }
    }

    func test_chain()
    {
        let data_from = ["Hello", "world", "woolang"];
        let chain = linknode::create(data_from)->dup();

        let arr = []mut: vec<string>;
        for(let x : chain)
            arr->add(x);

        for (let (index, elem) : data_from->iter |> iterator::enumerate)
            test_assure(elem == arr[index]);
    }
    func main()
    {
        test_chain();

        let mut p<T> = 0: T;

        p:<real> = 128.0; 
        test_assure(p:<int> == 0);

        p:<int> += 5;
        test_assure(p:<real> == 128.0);

        p:<handle> = 0x147H;
        test_assure(p:<int> == 5);
        test_assure(p:<handle> == 0x147H);

        let g = global_val:<string> as vec<string>;
        g->add("Helloworld");

        foo();

        let mut gval = option::none as option<vec<string>>;
        gval = option::value([]mut: vec<string>);

        match(gval)
        {
            value(x)?
            {
                do x as vec<string>;
                x->add("Helloworld");
                do x[0] as string;
                test_assure(x->len() == 1);
            }
            none?
                std::panic("Here should not be 'none'.");
        }

        let a = option::value("Hello");
        let b = a->map(func(v: string){return v + "world";});
        match(b)
        {
            value(x)?
                test_assure(x == "Helloworld");
            none?
                std::panic("Here should not be 'none'.");
        }
        let c = option::none as option<string>;
        let d = c->map(func(_: string){std::panic("That's should not been exec.");
                                       return "That's should not been exec.";});
        match(d)
        {
            value(_)?
                std::panic("Here should not be 'value'.");
            none?
                ;/* ok do nothing */
        }
    }
}

test_function("test_optional.main", test_optional::main);
