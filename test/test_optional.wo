import woo.std;
import test_tool;

namespace test_optional
{
    let global_val<T> = []: array<T>;

    func foo()
    {
        test_assure(global_val:<int>->len() == 0);
        test_assure(global_val:<string>->len() == 1);
        test_assure(global_val:<string>[0] == "Helloworld");

        let x = option::value(233);
        let y = option::none: option<int>;
        let m = {{1, x}, {2, y}};

        match(m->get(1)->reduce())
        {
            value(v)? test_assure(v as int == 233);
            none? test_assure(false);
        }
        match(m->get(2)->reduce())
        {
            value(v)? test_assure(false);
            none? ;
        }
    }

    func main()
    {
        let mut p<T> = 0: T;

        p:<real> = 128.0; 
        test_assure(p:<int> == 0);

        p:<int> += 5;
        test_assure(p:<real> == 128.0);

        p:<handle> = 0x147H;
        test_assure(p:<int> == 5);
        test_assure(p:<handle> == 0x147H);

        let g = global_val:<string> as array<string>;
        g->add("Helloworld");

        foo();

        let mut gval = option::none as option<array<string>>;
        gval = option::value([]: array<string>);

        match(gval)
        {
            option::value(x)?
            {
                x as array<string>;
                x->add("Helloworld");
                x[0] as string;
                test_assure(x->len() == 1);
            }
            option::none?
                std::panic("Here should not be 'none'.");
        }

        let a = option::value("Hello");
        let b = a->map(func(v: string){return v + "world"});
        match(b)
        {
            option::value(x)?
                test_assure(x == "Helloworld");
            option::none?
                std::panic("Here should not be 'none'.");
        }
        let c = option::none as option<string>;
        let d = c->map(func(x: string){std::panic("That's should not been exec.");
                                       return "That's should not been exec."});
        match(d)
        {
            option::value(x)?
                std::panic("Here should not be 'value'.");
            option::none?
                ;/* ok do nothing */
        }
    }
}

test_function("test_optional.main", test_optional::main);
