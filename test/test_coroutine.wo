import woo.std;
import woo.co;

import test_tool;

namespace test_coroutine
{
    func waitable_test()
    {
        using std;

        let co1 = co(func(){
            for(let i = 0;i < 3;i += 1)
            {
                co::sleep(1.);
                println("Helloworld");
            }
        });

        let co2 = co(func(pre_co:co){

            co::wait(pre_co);
            println("OK");

        }, (co1,));

        sleep(4.);
        co1->abort();

        while(!co2->completed())
            sleep(1.);
    }
    func finish_co()
    {
        let co_list = []:array< std::co >;

        for(let i = 0;i < 1000;i += 1)
        {
            co_list->add(std::co(func(){
                for(let i = 0;i < 3;i += 1)
                {
                    std::co::sleep(1.);
                }
            }));
        }
        for(let co : co_list)
            while(!co->completed())
                std::sleep(1.);

        co_list->clear();

        for(let i = 0;i < 4;i += 1)
            co_list->add(std::co(
                func()
                {
                    for(i = 0;i < 1'000'000;i += 1)
                        std::co::yield();
                }
            ));
        for(let co : co_list)
        {
            while(!co->completed())
                std::sleep(1.);
        }
    }

    func main()
    {
        waitable_test();
        finish_co();

        let vm = std::vm();

        vm->load_source(
        @"
        import woo.std;
        import woo.co;

        let co_list = []:array<std::co>;

        for(let i = 0; i < 1000; i += 1)
            co_list->add(std::co(
                func()
                {
                    while(true)
                        std::co::yield();
                }
            ));

        std::println("co ready!");
        std::sleep(3);
        std::println("shutting down coroutines!");

        for(let co : co_list)
        {
            co->abort();
        }
        std::println("over!");
        std::sleep(3);
        "@
        );

        vm->run();
        std::println("vm over!");
        std::sleep(3.);
        std::println("close vm!");
        vm->close();

        let aim_value = false;
        let _pack = [ref aim_value];

        let co1 = std::co(func(){ _pack[0] = true });
        while(!co1->completed())
            std::sleep(0.1);

        test_assure(aim_value);

        co1 = std::co(func(){
            for (let i = 0; i < 10; i += 1)
            {
                std::println("co working:", i);
                std::co::yield();
            }
        });

        while(!co1->completed())
            std::sleep(0.1);

        co1 = std::co(func(){
            for (;;)
            {
                std::println("co working 1...");
            }
        });
        let co2 = std::co(func(){
            for (;;)
            {
                std::println("co working 2...");
            }
        });

        std::co::stop_all();

        co1 = std::co(func(){
            for (let i = 0; i < 10; i += 1)
            {
                std::println("co working:", i);
                std::co::yield();
            }
        });

        while(!co1->completed())
            std::sleep(0.1);
    }
}

test_function("test_coroutine.main", test_coroutine::main);