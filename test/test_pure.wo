import woo::std;
import test_tool;

namespace test_pure
{
    func pure_test_foo1(){}
    func pure_test_foo2()=> impure void {}

    func pure_test_foo3()
    {
        return [1,2,3]->>\a = a;=>>\v = [v];;
    }
    func pure_test_foo4()
    {
        return [1,2,3]mut->>\a = a;=>>\v = [v]mut;;
    } 
    func pure_test_foo5()
    {
        return [1,2,3]->>\a = std::println(a);=>>\v = [v];;
    } 
    func pure_test_foo6()
    {
        return [1,2,3]->>\a = (a, a * 2);->mapping;
    } 
    func pure_test_foo7()
    {
        return [1,2,3]mut->>\a = (a, a * 2);->mapping;
    }

    func pure_test_foo8()
    {
        return [mut 1, 2];
    }
    func pure_test_foo9()
    {
        return [mut 1, 2]->get(0);
    }
    func pure_test_foo10()
    {
        return [mut 1, 2]->get(0)->val;
    }
    func pure_test_foo11()
    {
        let (a, b) = (mut 1, mut 2);
    }
    func pure_test_foo12()
    {
        let (_, _) = (mut 1, mut 2);
    }
    func pure_test_foo13()
    {
        match (option::value(mut 1))
        {
        value(a)?;
        none?;
        }
    }
    func pure_test_foo14()
    {
        match (option::value(mut 1))
        {
        value(_)?;
        none?;
        }
    }
    
    func pure_test_foo15()
    {
        do {[1] = 2};
    }
    func pure_test_foo16()
    {
        do {[1] = 2}->getor(0, 25);
    }
    func pure_test_foo17()
    {
        do {[1] = mut 2};
    }
    func pure_test_foo18()
    {
        do {[1] = mut 2}->getor(0, 25);
    }

    func main()
    {
        test_assure(std::is_same_type:< typeof(pure_test_foo1), ()=> pure void>);
        test_assure(std::is_same_type:< typeof(pure_test_foo2), ()=> impure void>);

        test_assure(std::is_same_type:< typeof(pure_test_foo3), ()=> pure array<int>>);
        test_assure(std::is_same_type:< typeof(pure_test_foo4), ()=> impure vec<int>>);
        test_assure(std::is_same_type:< typeof(pure_test_foo5), ()=> impure array<void>>);
        test_assure(std::is_same_type:< typeof(pure_test_foo6), ()=> pure dict<int, int>>);
        test_assure(std::is_same_type:< typeof(pure_test_foo7), ()=> impure dict<int, int>>);

        test_assure(std::is_same_type:< typeof(pure_test_foo8), ()=> pure array<mut int>>);
        test_assure(std::is_same_type:< typeof(pure_test_foo9), ()=> pure option<mut int>>);
        test_assure(std::is_same_type:< typeof(pure_test_foo10), ()=> impure int>);
        test_assure(std::is_same_type:< typeof(pure_test_foo11), ()=> impure void>);
        test_assure(std::is_same_type:< typeof(pure_test_foo12), ()=> pure void>);
        test_assure(std::is_same_type:< typeof(pure_test_foo13), ()=> impure void>);
        test_assure(std::is_same_type:< typeof(pure_test_foo14), ()=> pure void>);

        test_assure(std::is_same_type:< std::function_result_t<typeof(pure_test_foo9)>, pure option<mut int>>);
        test_assure(!std::is_same_type:< std::function_result_t<typeof(pure_test_foo9)>, option<mut int>>);  
        test_assure(!std::is_same_type:< std::function_result_t<typeof(pure_test_foo9)>, option<int>>);   
        test_assure(!std::is_same_type:< std::function_result_t<typeof(pure_test_foo9)>, pure option<int>>);  

        test_assure(std::is_pure_function_type:< typeof(pure_test_foo15) >);  
        test_assure(std::is_pure_function_type:< typeof(pure_test_foo16) >);  
        test_assure(std::is_pure_function_type:< typeof(pure_test_foo17) >);  
        test_assure(!std::is_pure_function_type:< typeof(pure_test_foo18) >);  
    }
}

test_function("test_pure.main", test_pure::main);
