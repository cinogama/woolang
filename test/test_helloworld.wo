import woo.std;
import test_tool;

namespace test_helloworld
{
    let mut _should_not_be_set_flag = false;
    let mut _should_be_set_flag = false;

    func execute_func()
    {
        std::println("You should see this.");
        return _should_be_set_flag := true;
    }
    func non_execute_func()
    {
        std::println("You should not see this.");
        return _should_not_be_set_flag := true;
    }

    func test_no_return_recursive(val: bool)
    {
        if (val)
            test_no_return_recursive(false);
    }

    func test_named_template_func_auto_impl(x)
    {
        return x;
    }

    func test_named_template_accept(f: (string)=>string)
    {
        std::println(f("Helloworld"));
    }

    func test_ignore_pattern(a: string, _: string, c: string)
    {
        return a + c;
    }

    func test_ignore_mut_pattern(mut a: string, _: string, mut c: string)
    {
        return a + c;
    }

    func test_lambda()
    {
        test_named_template_accept(test_named_template_func_auto_impl);
        test_named_template_accept(\x=x;);

        let ascii_h = 'H';
        test_assure(ascii_h == 72: char);

        let a = [1,2,3];

        let b = a->bind(\x:int = [x, x * 2];)
                ->> \x:int = x: string;
                =>> \x:string = [x + "hello", x + "world"];
                ;

        do b->map(\x:string = std::println(x););

        test_assure(b[0] == "1hello");
        test_assure(b[1] == "1world");
        test_assure(b[2] == "2hello");
        test_assure(b[3] == "2world");
        test_assure(b[4] == "2hello");
        test_assure(b[5] == "2world");
        test_assure(b[6] == "4hello");
        test_assure(b[7] == "4world");
        test_assure(b[8] == "3hello");
        test_assure(b[9] == "3world");
        test_assure(b[10] == "6hello");
        test_assure(b[11] == "6world");

        test_assure("Helloworld" == "Helloworld"->chars->str);
        test_equal("Helloworld", test_ignore_pattern("Hello", "WORLD", "world"));
        test_equal("Helloworld", test_ignore_mut_pattern("Hello", "WORLD", "world"));

        "Helloworld"->std::println;

        "Hello"
            ->\m:string = m + "world";
            ->\m:string = std::println(m);;

        func invoker(f: (int)=>int)
        {
            return f(2);
        }

        test_assure(invoker(\n: int=a[n];) == 3);
    }

    func main()
    {
        using std;

        func foo(_)
        {
            return 0;
        }
        let m = 0, msg = "Helloworld";
        let rmsg = m->foo->\n: int = m;->\n:int = m;->\n:int = m;->\n:int = msg;;
        test_assure(rmsg == msg);
        test_assure(rmsg == "Helloworld");

        let n = "Helloworld~";
        println(n);

        let fhello = func(){println("Helloworld~~");};
        fhello();

        let fhello2 = func(){print("~~"); println("Helloworld~~");};
        fhello2();

        do execute_func() || non_execute_func();
        test_assure(_should_be_set_flag && !_should_not_be_set_flag);
        _should_be_set_flag = _should_not_be_set_flag := false;

        do !execute_func() && non_execute_func();
        test_assure(_should_be_set_flag && !_should_not_be_set_flag);
        _should_be_set_flag = _should_not_be_set_flag := false;

        do (execute_func() || non_execute_func()) && (!execute_func() && non_execute_func());
        test_assure(_should_be_set_flag && !_should_not_be_set_flag);
        _should_be_set_flag = _should_not_be_set_flag := false;

        test_no_return_recursive(true) as void;
        do test_no_return_recursive as (bool)=>void;

        do \=func(){}; as ()=>()=>void;

        \a,b=std::println(a, b);("hello", "world");
        \a,b=std::println(a, b);(("hello", "world")...);
        ("hello", "world")...->\a,b=std::println(a, b);;

        let t = ("hello", "world");
        t...->\a,b=std::println(a, b);;

        test_lambda();
    }
}

test_function("test_helloworld.main", test_helloworld::main);
