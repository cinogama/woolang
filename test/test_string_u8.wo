import woo::std;

import pkg::thread;

import test_tool;

namespace test_string_u8
{
    func main()
    {
        test_equal("", "");
        test_assure("\0" != "");
        test_equal("\0"->len(), 1);
        test_equal("\0"->cchars()->len(), 1);
        test_equal("\0"->chars()->len(), 1);
        test_equal("\0"->cchars()[0], '\0': int: cchar);
        test_equal("\0"->chars()[0], '\0');

        test_equal("你好世界"[2], '世');
        test_equal("你好\0世界"[2], '\0');
        test_equal("你好\0世界"[3], '世');
        test_equal("你好\0世界"[4], '界');
        test_equal("你好\0世界"->len, 5);
        test_equal("你好\0世界"->chars->len, 5);

        test_equal("abcdef"->find("zzz")->or(-1), -1);
        test_equal("abcdef"->find("cd")->or(-1), 2);
        test_equal("abcdef"->find_from("cd", 3)->or(-1), -1);
        test_equal("abcdefcd"->find("cd")->or(-1), 2);
        test_equal("abcdefcd"->rfind("cd")->or(-1), 6);
        test_equal("abcdefcd"->find_from("cd", 4)->or(-1), 6);
        test_equal("abcdefcd"->rfind_from("cd", 4)->or(-1), 2);

        test_equal("中文abcd中文abcd"->find("ab")->or(-1), 2);
        test_equal("中文abcd中文abcd"->rfind("ab")->or(-1), 8);
        test_equal("中文abcd中文abcd"->find_from("ab", 2)->or(-1), 2);
        test_equal("中文abcd中文abcd"->find_from("ab", 3)->or(-1), 8);
        test_equal("中文abcd中文abcd"->rfind_from("ab", 6)->or(-1), 2);
        test_equal("中文abcd中文abcd"->rfind_from("ab", 3)->or(-1), 2);
        test_equal("中文abcd中文abcd"->rfind_from("abc", 3)->or(-1), 2);
        test_equal("中文abcd中文abcd"->rfind_from("abc", 4)->or(-1), 2);
        test_equal("中文abcd中文abcd"->rfind_from("ab", 2)->or(-1), -1);

        let str = "Helloworld";
        test_equal(str, "Helloworld");
        test_equal(str->sub_len(0, 5), "Hello");
        test_equal(str[0], 'H');
        test_equal(str[1], 'e');
        test_equal(str[2], 'l');
        test_equal(str[3], 'l');

        let chstr = "你好世界";
        test_equal(chstr, "你好世界");
        test_equal(chstr->sub_len(0, 2), "你好");
        test_equal(chstr[0], '你');
        test_equal(chstr[1], '好');
        test_equal(chstr[2], '世');
        test_equal(chstr[3], '界');

        let combine = str->sub_len(0, 5) + chstr->sub_len(2, 2);
        test_equal(combine, "Hello世界");
        test_equal(combine->len(), 7);

        test_equal(""->len(), 0);
        test_equal("ABC"->len(), 3);
        test_equal("你好"->len(), 2);

        let wchars = combine->chars() as array<char>;
        let cchars = combine->cchars() as array<cchar>;

        test_assure(wchars->len != cchars->len);
        test_equal(wchars->str(), cchars->cstr());

        // Cannot crash when meet bad string.
        let badstr_1 = "你好世界"->chars->>\ch=ch: int: cchar;->cstr;
        std::println("\n", F"BAD_STRING SIZE {badstr_1->len}= ", badstr_1);
        for (let mut i = 0; i < badstr_1->len; i += 1)
            std::print(badstr_1[i], "");
        
        let badstr_2 = "你好世界"->cchars->>\ch=ch: int: char;->str;
        std::println("\n", F"BAD_STRING SIZE {badstr_2->len}= ", badstr_2);
        for (let mut i = 0; i < badstr_2->len; i += 1)
            std::print(badstr_2[i], "");

        let badstr_3 = F"你好{badstr_2}世界";
        std::println("\n", F"BAD_STRING SIZE {badstr_3->len}= ", badstr_3);
        for (let mut i = 0; i < badstr_3->len; i += 1)
            std::print(badstr_3[i], "");

        do do array::create(4, do nil)
            ->> \_ = thread::create(
                func()
                {
                    for (let mut r = 0; r < 1000; r += 1)
                    {
                        let bad_ch_set = F"你好世界"->cchars;
                        let badstr_r = [1, 2, 3, 4, 5, 6, 7]mut
                            ->> \_ = std::rand(0, bad_ch_set->len - 1);
                            ->> \idx = bad_ch_set[idx];
                            ->  cstr;
                        
                        test_assure(badstr_r->len <= 7);
                        test_equal(badstr_r as string->len, badstr_r->chars as array<char>->len);
                        test_assure(badstr_r as string->len <= badstr_r->cchars as array<cchar>->len);
                        
                        std::print(badstr_r, "");

                        for (let mut i = 0; i < badstr_r->len; i += 1)
                            std::print(badstr_r[i], "");
                    }
                });
            ->> \t = t->wait;
            ->> \_ = thread::create(
                func()
                {
                    for (let mut r = 0; r < 100000; r += 1)
                    {
                        let bad_ch_set = F"你好世界"->cchars;
                        let badstr_r = [1, 2, 3, 4, 5, 6, 7]mut
                            ->> \_ = std::rand(0, bad_ch_set->len - 1);
                            ->> \idx = bad_ch_set[idx];
                            ->  cstr;
                        
                        test_assure(badstr_r->len <= 7);
                        test_equal(badstr_r as string->len, badstr_r->chars as array<char>->len);
                        test_assure(badstr_r as string->len <= badstr_r->cchars as array<cchar>->len);
                    }
                });
            ->> \t = t->wait;
            ;
        
    }
}

test_function("test_string_u8.main", test_string_u8::main);
