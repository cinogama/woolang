import woo.std;
import test_tool;

namespace test_string_u8
{
    func main()
    {
        let str = "Helloworld";
        test_equal(str, "Helloworld");
        test_equal(str->subto(0, 5), "Hello");
        test_equal(str[0], 'H');
        test_equal(str[1], 'e');
        test_equal(str[2], 'l');
        test_equal(str[3], 'l');

        let chstr = "你好世界";
        test_equal(chstr, "你好世界");
        test_equal(chstr->subto(0, 2), "你好");
        test_equal(chstr[0], '你');
        test_equal(chstr[1], '好');
        test_equal(chstr[2], '世');
        test_equal(chstr[3], '界');

        let combine = str->subto(0, 5) + chstr->subto(2, 2);
        test_equal(combine, "Hello世界");
        test_equal(combine->len(), 7);

        test_equal(""->len(), 0);
        test_equal("ABC"->len(), 3);
        test_equal("你好"->len(), 2);

        let wchars = combine->chars() as array<char>;
        let cchars = combine->cchars() as array<cchar>;

        test_assure(wchars->len != cchars->len);
        test_equal(wchars->str(), cchars->cstr());

        // Cannot crash when meet bad string.
        let badstr_1 = "你好世界"->chars->>\ch=ch: int: cchar;->cstr;
        std::println(F"BAD_STRING SIZE {badstr_1->len}= ", badstr_1);
        for (let mut i = 0; i < badstr_1->len; i += 1)
            std::print(badstr_1[i], "");
        
        let badstr_2 = "你好世界"->cchars->>\ch=ch: int: char;->str;
        std::println(F"BAD_STRING SIZE {badstr_2->len}= ", badstr_2);
        for (let mut i = 0; i < badstr_2->len; i += 1)
            std::print(badstr_2[i], "");

        let badstr_3 = F"你好{badstr_2}世界";
        std::println(F"BAD_STRING SIZE {badstr_3->len}= ", badstr_3);
        for (let mut i = 0; i < badstr_3->len; i += 1)
            std::print(badstr_3[i], "");

        for (let mut r = 0; r < 1000; r += 1)
        {
            let bad_ch_set = F"你好世界"->cchars;
            let badstr_r = [1, 2, 3, 4, 5, 6, 7]
                ->> \idx = std::randint(0, bad_ch_set->len - 1);
                ->> \idx = bad_ch_set[idx];
                ->  cstr;
            
            test_assure(badstr_r->len <= 7);
            
            std::println(F"\n\nBAD_STRING SIZE {badstr_r->len}= ", badstr_r);
            for (let mut i = 0; i < badstr_r->len; i += 1)
                std::print(badstr_r[i], "");
        }
    }
}

test_function("test_string_u8.main", test_string_u8::main);
