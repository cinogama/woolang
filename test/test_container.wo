import woo.std;
import test_tool;

namespace test_container
{
    func test_array_swap_copy()
    {
        let a = mut [1, 2, 3];
        let b = mut [4, 5];

        a->swap(b);

        test_assure(a[0] == 4);
        test_assure(a[1] == 5);
        test_assure(a->len == 2);

        test_assure(b[0] == 1);
        test_assure(b[1] == 2);
        test_assure(b[2] == 3);
        test_assure(b->len == 3);

        a->copy(b);
        b->add(233);

        test_assure(a[0] == 1);
        test_assure(a[1] == 2);
        test_assure(a[2] == 3);
        test_assure(a->len == 3);

        test_assure(b[0] == 1);
        test_assure(b[1] == 2);
        test_assure(b[2] == 3);
        test_assure(b[3] == 233);
        test_assure(b->len == 4);
    }
    func test_map_swap_copy()
    {
        let a = mut {["pi"] = 3.14};
        let b = mut {["e"] = 2.718, ["sqrt2"] = 1.414};

        a->swap(b);

        test_assure(a["e"] == 2.718);
        test_assure(a["sqrt2"] == 1.414);
        test_assure(a->len == 2);

        test_assure(b["pi"] == 3.14);
        test_assure(b->len == 1);

        a->copy(b);
        b->set("gratio", 0.618);

        test_assure(a["pi"] == 3.14);
        test_assure(a->len == 1);

        test_assure(b["pi"] == 3.14);
        test_assure(b["gratio"] == 0.618);
        test_assure(b->len == 2);
    }
    func test_reduce()
    {
        let a = [1, 6, 2, 7, 8, 10, 12, 23];
        test_assure(a->reduce(\lv:int, rv:int = lv>rv?lv|rv;)->val == 23);
        test_assure(a->reduce(\lv:int, rv:int = lv%2==0?lv|rv;)->val == 6);
        test_assure(a->rreduce(\lv:int, rv:int = rv%2==0?rv|lv;)->val == 12);
        test_assure(![]->reduce(\_1:void,_2:void=option::none->val;)->has);
        test_assure(![]->rreduce(\_1:void,_2:void=option::none->val;)->has);
    }
    func main()
    {
        test_array_swap_copy();
        test_map_swap_copy();
        test_reduce();
    }
}

test_function("test_container.main", test_container::main);
