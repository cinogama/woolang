import woo.std;
import test_tool;

import pkg.worst;

namespace test_container
{
    func test_array_swap_copy()
    {
        let a = [1, 2, 3]mut;
        let b = [4, 5]mut;

        a->swap(b);

        test_assure(a[0] == 4);
        test_assure(a[1] == 5);
        test_assure(a->len == 2);

        test_assure(b[0] == 1);
        test_assure(b[1] == 2);
        test_assure(b[2] == 3);
        test_assure(b->len == 3);

        a->copy(b);
        b->add(233);

        test_assure(a[0] == 1);
        test_assure(a[1] == 2);
        test_assure(a[2] == 3);
        test_assure(a->len == 3);

        test_assure(b[0] == 1);
        test_assure(b[1] == 2);
        test_assure(b[2] == 3);
        test_assure(b[3] == 233);
        test_assure(b->len == 4);
    }
    func test_map_swap_copy()
    {
        let a = {["pi"] = mut 3.14}mut;
        let b = {["e"] = mut 2.718, ["sqrt2"] = mut 1.414}mut;

        a->swap(b);

        test_assure(a["e"] == 2.718);
        test_assure(a["sqrt2"] == 1.414);
        test_assure(a->len == 2);

        test_assure(b["pi"] == 3.14);
        test_assure(b->len == 1);

        a->copy(b);
        b["gratio"] = 0.618;

        test_assure(a["pi"] == 3.14);
        test_assure(a->len == 1);

        test_assure(b["pi"] == 3.14);
        test_assure(b["gratio"] == 0.618);
        test_assure(b->len == 2);
    }
    func test_reduce()
    {
        let a = [1, 6, 2, 7, 8, 10, 12, 23];
        test_assure(a->reduce(\lv:int, rv:int = lv>rv?lv|rv;)->val == 23);
        test_assure(a->reduce(\lv:int, rv:int = lv%2==0?lv|rv;)->val == 6);
        test_assure(a->rreduce(\lv:int, rv:int = rv%2==0?rv|lv;)->val == 12);
        test_assure(![]->reduce(\_1:void,_2:void=option::none->val;)->has);
        test_assure(![]->rreduce(\_1:void,_2:void=option::none->val;)->has);

        test_assure([4,5]->connect([2,3])->len == 4);
        test_assure([4,5]->connect([2,3])[3] == 3);

        do [mut true]->map(\f: mut bool = 1;);
        do {["k"] = mut false}->map(\k:string, v: mut bool = (0, 0););
        do {["k"] = mut false}->map(\k:string, v: mut bool = (0, mut 0);) as dict<int, mut int>;
    }
    func output_9x9()
    {
        let a = [1,2,3,4,5,6,7,8,9];
        let b = a
            =>> \n = [ a
                =>> \an = an >= n
                    ? [F"{n}x{an}={an*n}"]
                    | [];
                ];
            ;
        let c = b
            ->> \es = es
                ->  reduce(\l, r = l + " " + r;)
                ->> func(s){do as pure std::println(s);}
                ;
            ;
    }
    func test_array_construct()
    {
        let v = []mut : vec<int>;
        let f = func(n: int){v->add(n); return n;};

        let a = [f(1), f(2), f(3), f(4)];

        test_assure(a->len == v->len);
        for (let idx, val : v)
        {
            test_assure(a[idx] == val);
        }
    }
    func test_map_construct()
    {
        let v = []mut : vec<int>;
        let f = func(n: int){v->add(n); return n;};

        let a = [1, 2, 3, 4];
        let m = {[1] = f(1), [2] = f(2), [3] = f(3), [4] = f(4),};

        test_assure(a->len == v->len);
        for (let idx, val : v)
        {
            test_assure(a[idx] == val);
        }
    }

    func all<T>(iterable: T)
    {
        let iterator = iterable->iter;

        alias elem_t = typeof(iterator->next->val);
        //                    ^^^^^^^^ Here!
        let elems = []mut: vec<elem_t>;

        while (true)
        {
            match(iterator->next)
            {
            value(e)? elems->add(e);
            none? break;
            }
        }
        return elems->unsafe::cast:<array<elem_t>>;
    }
    func test_index()
    {
        let a = [mut 1,2,3,4,5];
        test_assure(a[-2] == 4);
        a[-2] = 6;

        test_assure(a[-2] == 6);
    }
    func main()
    {
        test_index();
        output_9x9();
        test_array_swap_copy();
        test_map_swap_copy();
        test_reduce();
        test_array_construct();
        test_map_construct();

        test_assure("{}"->todict->val->len == 0);
        test_assure(!@"{"\invalid"}"@->todict->has);

        // BUG: 221223-JIT-ret pop not work when jit.
        let x = []mut: vec<string>;
        for (let mut i = 0; i < 100000; i += 1)
            x->add(F"str_{i}");
        do x->forall(\s = s->beginwith("0"););

        let y = all(["hello", "world"])->>\t = t...->\i,e = F"{i}{e}";;->reduce(\l,r = l + r;)->val;
        test_equal(y, "0hello1world");

        let a = [1, 3, 7, 2, 4, 9];
        let b = a->std::sort(\_, _ = false;);

        for (let i : std::range::create(0, 5))
            test_equal(a[i], b[i]);
        
        let c = a->std::sort(\a, b = a < b;);
        for (let i, v : [1, 2, 3, 4, 7, 9])
            test_equal(c[i], v);

        do [(mut 0, mut 1)]->mapping as dict<mut int, mut int>;
        do {[mut 0] = mut 1}->unmapping as array<(mut int, mut int)>;
        do {[mut 0] = mut ""}->keys as array<mut int>;
        do {[mut 0] = mut ""}->vals as array<mut string>;

        do [(mut 0, mut 1)]mut->mapping as dict<mut int, mut int>;
        do {[mut 0] = mut 1}mut->unmapping as array<(mut int, mut int)>;
        do {[mut 0] = mut ""}mut->keys as array<mut int>;
        do {[mut 0] = mut ""}mut->vals as array<mut string>;
    }
}

test_function("test_container.main", test_container::main);
