import woo::std;
import woo::debug;
import test_tool;

namespace test_template
{
    using wraped_iterator<IType, EType> = struct {
        iter : IType<EType>,
        pred : (EType)=>bool,
    };
    namespace wraped_iterator
    {
        func create<IType, EType, PredType>(iter:IType<EType>, pred:PredType)
        {
            return wraped_iterator:<IType, EType>{
                iter = iter,
                pred = pred,
            };
        }

        func iter<WIType>(self:WIType)
        {
            return self;
        }

        func next<IType, EType>(self: wraped_iterator<IType, EType>)
        {
            while(true)
            {
                match (self.iter->next())
                {
                value((out_index, out_val))?
                    if (self.pred(out_val))
                        return option::value((out_index, out_val));
                none?
                    return option::none;
                }
            }
        }
    }

    func invokable<T>(foo:(T)=>T, n:T)
    {
        return foo(n);
    }
    func fib<T>(n:T)
    {
        if (n <= 2:T)
            return 1:T;
        return fib:<T>(n-1:T) + fib:<T>(n-2:T);
    }
    func diff_static<T>()
    {
        static let a = []:array<T>;
        return a;
    }

    func typename_of<T>()
    {
        let _tmp = 0:T;

        if (_tmp is dynamic)
            return "dynamic";
        else if (_tmp is int)
            return "int";
        else if (_tmp is real)
            return "real";
        else
            return "unknown";
    }

    func test_cost_time<T>()
        where !(std::declval:<T>() is dynamic);
    {
        let begin_time = std::time();
        let mut i = 0:T;
        while (i < 1_0000_0000:T)
            i += 1:T;
        let end_time = std::time();

        std::println(typename_of:<T>(), "cost:", end_time - begin_time, "sec.");
    }

    func cast_to<TO, FROM>(val:FROM)
    {
        return val:TO;
    }

    func template_if_constexpr_test<T>()
    {
        if (0:T is real)
            return 1.25;
        else
            return 1;
    }
    
    using MyTemplate<T> = int;
    namespace MyTemplate
    {
        func MyTemplateTName<T>(_: MyTemplate<T>)
        {
            return typename_of:<T>();
        }
        func CheckForType<SP, T>(_: MyTemplate<T>)
        {
            // do check:
            let p = option::none: option<SP>;
            do p ->> \e = e as T;;
        }
    }

    using MySecTemplate<T> = int;
    func TemplateAutoJudgeTest<K, T>(self:K<T>)
    {
        if (self is MyTemplate<T>)
            return "fail";
        else if (self is MySecTemplate<T>)
            return "ohooo";
        else if (self is array<T>)
            return "success";
        else
            return "?";
    }
    
    namespace A
    {
        using xxtype = gchandle_type;
        namespace xxtype
        {
            func create()
            {
                return "success";
            }
            func instance()
            {
                return std::debug::__empty_function:<xxtype>();
            }
        }
    }

    func make_instance<T>()
    {
        return typeof(T::instance())::create();
    }

    using gchandle_type = gchandle;
    namespace gchandle_type
    {
        func create()
        {
            return "gchandle_type success";
        }
        func instance()
        {
            return std::debug::__empty_function:<gchandle_type>();
        }
    }

    func is_same<T1, T2>()
    {
        return func()=>T1{} is ()=>T2;
    }

    let mut constexpr_if_test_flag = false;
    func constexpr_if_test<T>()
    {
        do std::debug::__empty_function:<gchandle>() as T; // T must same as gchandle for this test..

        if (func()=> T{constexpr_if_test_flag = true; return std::debug::__empty_function:<T>();}() is T)
        {
            return 233;
        }
    }

    func invoke_template<FR, FA>(foo:(FA)=>FR, arg:FA)
    {
        return foo(arg);
    }

    func append_str_hello(msg:string)
    {
        return "hello" + msg;
    }

    func test_typeof_in_template<T>()
    {
        return func(){};
    }

    func test_typeof_in_template2<T>()
    {
        return func(){return 1;};
    }

    func for_m_test_foo<T>(x: int)
    {
        return x+1;
    }

    using mtest<T> = struct {
        c : mut typeof(for_m_test_foo:<T>(0)),
    };
    namespace mtest
    {
        func create<T>()
        {
            return mtest:<T>{
                c = mut for_m_test_foo:<T>(16)
            };
        }
    }

    func template_func_symb_inside_impl<T>()
    {
        if (0. is T)
            return 3.14159;
        else
            return "pi";
    }
    func template_func_symb_inside<T>()
    {
        return template_func_symb_inside_impl:<T>();
    }

    func hkt_foo<HKT, T, B>(_: HKT<T<B>>)
    {
        return \ = std::declval:<T<string>>();;
    }

    func test_typeof_template()
    {
        using std;
        alias foo<A, B> = typeof(declval:<A>() + declval:<B>());
        
        do option::none : option<foo<int, int>> as option<int>;
    }

    func test_mut_mark_bug()
    {
        func mut_mark_bug1<T>(_: array<T>)
        {
            do []: array<mut T>;
            return []: array<T>;
        }
        func mut_mark_bug2<T>(_: array<T>)
        {
            do []: array<T>;
            return []: array<mut T>;
        }

        do mut_mark_bug1([true])->map(\_: bool = 0;);
        do mut_mark_bug2([true])->map(\_: mut bool = 0;);
    }

    let issame<A, B> = 
        std::declval:<A>() is B && std::declval:<B>() is A;

    alias bool_if_void<T> = 
        typeof(issame:<T, void> ? std::declval:<bool>() | std::declval:<T>());

    alias boom_t = typeof(func(){return 0;});

    func return_2_times_val<T>(a: T)
    {
        return a * 2: T;
    }
    
    func return_5_times_val<T>(a: T)
    {
        return a * 5: T;
    }

    func call_and_return<T>(f: (T)=>T, v: T)
    {
        return f(v);
    }

    func main()
    {
        test_assure(call_and_return(return_2_times_val, 256) == 512);
        test_assure(call_and_return(return_2_times_val, 128.) == 256.);
        test_assure(call_and_return(return_5_times_val, 20.) == 100.);

        test_assure(option::none->val: bool_if_void<boom_t> is ()=>int);
        test_assure(option::none->val: bool_if_void<void> is bool);

        test_typeof_template();
        test_mut_mark_bug();

        using myarr<T> = array<T>;

        do hkt_foo([[1]: myarr<int>]) as ()=>myarr<string>;
        do hkt_foo([[1]]) as ()=>array<string>;

        using sparr<T> = array<real>;
        alias alarr<T> = array<bool>;
        alias alarrsp<T> = alarrsp_struct<bool>;

        do hkt_foo([[1.5]: sparr<int>]) as ()=>sparr<string>;

        // 220901 alias not passed if alias is completed. 
        do hkt_foo([[true]: alarr<int>]) as ()=>array<string>;
        do hkt_foo([alarrsp:<int>{memb = true}]) as ()=>alarrsp_struct<string>;

        let mins = mtest::create:<string>();
        mins.c = 66;
        
        test_assure(template_func_symb_inside:<real>() == template_func_symb_inside:<real>());
        test_assure(template_func_symb_inside:<string>() == template_func_symb_inside:<string>());
        
        test_assure(template_func_symb_inside:<real>() == 3.14159);
        test_assure(template_func_symb_inside:<string>() == "pi");

        let mut xfunc = test_typeof_in_template:<int>;
        xfunc = func(){return func(){};};

        do xfunc;

        let mut xfunc2 = test_typeof_in_template:<int>();
        xfunc2 = func(){};

        do xfunc2;
 
        let mut xfunc3 = test_typeof_in_template2:<int>;
        xfunc3 = func(){return func(){return 0;};};

        do xfunc3;

        let mut xfunc4 = test_typeof_in_template2:<int>();
        xfunc4 = func(){return 0;};

        do xfunc4;

        test_equal(invoke_template(append_str_hello,"world"), "helloworld");

        // 220813: 'is' expr will be not eval if value in expr is not dynamic;
        do constexpr_if_test:<gchandle>();
        test_assure(!constexpr_if_test_flag);

        test_equal(is_same:<int, int>(), true);
        test_equal(is_same:<real, int>(), false);
        test_equal(is_same:<MyTemplate<int>, MyTemplate<int>>(), true);
        test_equal(is_same:<MyTemplate<int>, MyTemplate<real>>(), false);
        test_equal(is_same:<MyTemplate<int>, MySecTemplate<int>>(), false);
        test_equal(is_same:<MyTemplate<int>, int>(), false);

        test_assure(!std::issame(fib:<real>, fib:<int>));
        test_assure(!std::issame(fib:<int>, fib:<real>));
        test_assure(std::issame(fib:<int>, fib:<int>));
        test_assure(std::issame(fib:<real>, fib:<real>));

        test_assure(fib:<int> is (int)=>int);
        test_assure(fib:<real> is (real)=>real);

        test_assure(diff_static:<int>() is array<int>);
        test_assure(diff_static:<real>() is array<real>);
        test_assure(!std::issame(diff_static:<real>(), diff_static:<int>()));
        test_assure(std::issame(diff_static:<real>(), diff_static:<real>()));
        test_assure(std::issame(diff_static:<int>(), diff_static:<int>()));

        // ISSUE: 1.13: anything has been removed from woolang.
        // test_assure([] is array<anything>);
        // test_assure([1] is array<anything>);
        // test_assure(!([mut 1] is array<anything>));
        // test_assure([] is array<mut anything>);
        // test_assure(!([1] is array<mut anything>));
        // test_assure([mut 1] is array<mut anything>);

        let result = invokable(fib:<int>, 10);

        test_equal(result, 55);
        test_equal(fib:<int>(10), 55);
        test_equal(fib:<real>(10.), fib:<real>(10.));

        test_cost_time:<int>();
        test_cost_time:<int>();
        test_cost_time:<real>();
        // test_cost_time:<dynamic>();

        test_equal(cast_to:<string>(3)+".14159", "3.14159");

        do template_if_constexpr_test:<int>():dynamic as int;
        do template_if_constexpr_test:<real>():dynamic as real;

        let mt_int = 0:MyTemplate<int>;
        let mt_real = 0:MyTemplate<real>;

        test_equal(mt_int->MyTemplateTName(), "int");
        test_equal(mt_real->MyTemplateTName(), "real");
        test_equal(mt_real->MyTemplateTName(), "real");

        mt_int->CheckForType:<int>();
        mt_real->CheckForType:<real>();

        let n0 = []:array<real>;
        let n1 = 0:MyTemplate<real>;
        let n2 = 0:MySecTemplate<real>;
        test_equal(TemplateAutoJudgeTest(n0), "success");
        test_equal(TemplateAutoJudgeTest(n1), "fail");
        test_equal(TemplateAutoJudgeTest(n2), "ohooo");

        test_equal(make_instance:<A::xxtype>(), "success");
        test_equal(make_instance:<gchandle_type>(), "gchandle_type success");

        let p = []mut: vec<int>;
        let q = [1,2,3,4,5,6,7,8,9];
        for(let _, v : wraped_iterator::create(q->iter(), func(e:int){return e==5;}))
        {
            p->add(v);
        }
        test_equal(p->len(), 1);
        test_equal(p[0], 5);
    }

    using alarrsp_struct<T> = struct { memb : T };

}

test_function("test_template.main", test_template::main);
