import woo::std;
import test_tool;

#macro test_macro_test_matching
{
    if (lexer->next_token[0] != std::token_type::l_identifier)
        lexer->error("Unmatched token, expected 'identifier'.");
    if (lexer->next_token[0] != std::token_type::l_using)
        lexer->error("Unmatched token, expected 'using'.");
    if (lexer->next_token[0] != std::token_type::l_typeid)
        lexer->error("Unmatched token, expected 'typeid'.");
}

#macro test_macro_value_it_self
{
    if (lexer->next != "(")
        lexer->error("Unexpected token, expected '('.");

    let mut result = "";
    for (;;)
    {
        let token = lexer->next;
        if (token == "")
        {
            lexer->error("Unexpected EOF.");
            return "";
        }
        else if (token == ")")
            break;
        
        result += token + " ";
    }
    return result;
}

#macro test_generated_macro
{
    return "#macro test_generated_macro_instance{return \"1\";}";
}

test_macro_test_matching!
abc123
using
typeid

#macro test_bad_token_reader
{
    return lexer->next->enstring;
}

namespace test_macro
{
    func main()
    {
        let a = 5;
        test_assure(test_macro_value_it_self!(1) == 1);
        test_assure(test_macro_value_it_self!(3.14) == 3.14);
        test_assure(test_macro_value_it_self!("Helloworld") == "Helloworld");
        test_assure(test_macro_value_it_self!(F"A{1}B{a}C") == F"A{1}B{a}C");

        test_assure(test_bad_token_reader! $ == "$");
        test_assure(test_bad_token_reader! 123 == "123");
        test_assure(test_bad_token_reader! 3.14 == "3.14");
        test_assure(test_bad_token_reader! $ != "#");

        test_generated_macro!;
        test_assure(test_generated_macro_instance! == 1);
    }
}
test_function("test_macro.main", test_macro::main);
