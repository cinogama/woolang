import rscene.std;
import test_tool;

namespace test_template
{
    func invokable<T>(var foo:T(T), var n:T)
    {
        return foo(n);
    }
    func fib<T>(var n:T)
    {
        if (n <= 2)
            return 1:T;
        return fib:<T>(n-1) + fib:<T>(n-2);
    }
    func diff_static<T>()
    {
        static var a = []:array<T>;
        return a;
    }

    func typename_of<T>()
    {
        const var _tmp = 0:T;

        if (_tmp is dynamic)
            return "dynamic";
        else if (_tmp is int)
            return "int";
        else if (_tmp is real)
            return "real";
        else
            return "unknown";
    }

    func test_cost_time<T>()
    {
        var begin_time = std::time();
        var i = 0:T;
        while (i < 1_0000_0000:T)
            i += 1:T;
        var end_time = std::time();

        std::println(typename_of:<T>(), "cost:", end_time - begin_time, "sec.");
    }

    func cast_to<TO, FROM>(var val:FROM)
    {
        return val:TO;
    }

    func no_template_test()
    {
        return "no_template";
    }

    func no_template_test<T>()
    {
        return "has_template";
    }

    func no_template_first_test_1(var n:int)
    {
        return "no_template";
    }
    func no_template_first_test_1<T>(var n:T)
    {
        return "has_template";
    }

    func no_template_first_test_2(var n:int, var x:real)
    {
        return "no_template";
    }
    func no_template_first_test_2<T>(var n:T, var x:real)
    {
        return "has_template";
    }

    func no_template_first_test_3(var n:int, ...)
    {
        return "no_template";
    }
    func no_template_first_test_3<T>(var n:T, ...)
    {
        return "has_template";
    }

    func template_if_constexpr_test<T>()
    {
        if (0:T is real)
            return 1.25;
        else
            return 1;
    }

    func no_if_constexpr_test_1()
    {
        if (1)
            return 1.25;
        else
            return 1;
    }

    func no_if_constexpr_test_2()
    {
        if (0)
            return 1.25;
        else
            return 1;
    }
    
    using MyTemplate<T> = int;
    namespace MyTemplate
    {
        func MyTemplateTName<T>(var self:MyTemplate<T>)
        {
            return typename_of:<T>();
        }
        func CheckForType<SP, T>(var self:MyTemplate<T>)
        {
            // do check:
            func():SP{}() as T;
        }
    }

    using MySecTemplate<T> = int;
    func TemplateAutoJudgeTest<T>(var self:MyTemplate<T>)
    {
        return "fail";
    }
    func TemplateAutoJudgeTest<T>(var self:MySecTemplate<T>)
    {
        return "ohooo";
    }
    func TemplateAutoJudgeTest<T>(var self:array<T>)
    {
        return "success";
    }

    
    namespace A
    {
	    using xxtype = gchandle_type;
	    namespace xxtype
	    {
		    func create()
		    {
			    return "success";
		    }
		    func instance()
		    {
			    return nil:xxtype;
		    }
	    }
    }

    func make_instance<T>()
    {
	    return typeof(T::instance())::create();
    }

    using gchandle_type = gchandle;
    namespace gchandle_type
    {
        func create()
		{
			return "gchandle_type success";
		}
		func instance()
		{
			return nil:gchandle_type;
		}
    }

    func is_same<T1, T2>()
    {
	    return func():T1{} is T2();
    }

    var constexpr_if_test_flag = false;
    func constexpr_if_test<T>()
    {
        nil:gchandle as T; // T must same as gchandle for this test..

        if (func():T{constexpr_if_test_flag = true;return nil;}() is T)
        {
            return 233;
        }
    }

    func invoke_template<FR, FA>(var foo:FR(FA), var arg:FA)
    {
	    return foo(arg);
    }

    func append_str_hello(var msg:string)
    {
	    return "hello" + msg;
    }

    func test_typeof_in_template<T>()
    {
        return nil:typeof(func(){});
    }

    func test_typeof_in_template2<T>()
    {
        var a = func(){return 1;};
        return nil:typeof(a);
    }

    func main()
    {
        var xfunc = test_typeof_in_template:<int>;
        xfunc = func(){return func(){};};

        var xfunc2 = test_typeof_in_template:<int>();
        xfunc2 = func(){};
 
        var xfunc3 = test_typeof_in_template2:<int>;
        xfunc3 = func(){return func(){return 0;};};

        var xfunc4 = test_typeof_in_template2:<int>();
        xfunc4 = func(){return 0;};

        test_equal(invoke_template(append_str_hello,"world"), "helloworld");

        constexpr_if_test:<gchandle>();
        test_assure(constexpr_if_test_flag);

        test_equal(is_same:<int, int>(), true);
        test_equal(is_same:<real, int>(), false);
        test_equal(is_same:<MyTemplate<int>, MyTemplate<int>>(), true);
        test_equal(is_same:<MyTemplate<int>, MyTemplate<real>>(), false);
        test_equal(is_same:<MyTemplate<int>, MySecTemplate<int>>(), false);
        test_equal(is_same:<MyTemplate<int>, int>(), false);

        test_equal(fib:<int>, fib:<int>);
        test_assure(fib:<int> != fib:<real>);

        test_assure(fib:<int> is int(int));
        test_assure(fib:<real> is real(real));

        test_assure(diff_static:<int>() is array<int>);
        test_assure(diff_static:<real>() is array<real>);
        test_assure(diff_static:<real>() != diff_static:<int>());

        var result = invokable(fib:<int>, 10);

        test_equal(result, 55);

        test_cost_time:<int>();
        test_cost_time:<int>();
        test_cost_time:<real>();
        test_cost_time:<dynamic>();
        

        test_equal(cast_to:<string>(3)+".14159", "3.14159");

        test_equal(no_template_test(), "no_template");
        test_equal(no_template_first_test_1(0), "no_template");
        test_equal(no_template_first_test_2(0,0), "no_template");
        test_equal(no_template_first_test_3(0,233), "no_template");

        template_if_constexpr_test:<int>():dynamic as int;
        template_if_constexpr_test:<real>():dynamic as real;
        no_if_constexpr_test_1():dynamic as real;
        no_if_constexpr_test_2():dynamic as real;

        var mt_int = 0:MyTemplate<int>;
        var mt_real = 0:MyTemplate<real>;

        test_equal(mt_int->MyTemplateTName(), "int");
        test_equal(mt_real->MyTemplateTName(), "real");
        test_equal(mt_real->MyTemplateTName(), "real");

        mt_int->CheckForType:<int>();
        mt_real->CheckForType:<real>();

        var n0 = []:array<real>;
        var n1 = 0:MyTemplate<real>;
        var n2 = 0:MySecTemplate<real>;
        test_equal(TemplateAutoJudgeTest(n0), "success");
        test_equal(TemplateAutoJudgeTest(n1), "fail");
        test_equal(TemplateAutoJudgeTest(n2), "ohooo");

        test_equal(make_instance:<A::xxtype>(), "success");
        test_equal(make_instance:<gchandle_type>(), "gchandle_type success");
    }
}

test_function("test_template.main", test_template::main);