import woo::std;

import pkg::thread;
import pkg::iterator;

import test_tool;

namespace test_gc
{
    let mut global_list = []mut: vec<dynamic>;

    let TEST_TIME = 35.;

    func test_gchandle_work()
    {
        std::println("test_gchandle_work begin");

        let test_begin_time = std::time();
        while (std::time() - test_begin_time <= TEST_TIME)
        {
            let arr = [1];
            for (let _: arr)
            {
                let d = {["Hello"] = "world"};
                do "Hello" + d["Hello"];

                for (let _: arr)
                {
                    // do nothing..
                }
            }
        }
    }

    func test_gc_parallel_work(id: int)
    {
        std::println("test_gc_co/thread id=", id, "begin");

        let local_list = [1: dynamic,2: dynamic,3: dynamic,4: dynamic,5: dynamic]mut: vec<dynamic>;
        let tmp = []mut: vec<vec<int>>;
        let arr_a = [[12345678]mut,]mut, arr_b = []mut: vec<vec<int>>;

        let test_begin_time = std::time();

        while (std::time() - test_begin_time <= TEST_TIME)
        {
            global_list->add({["Hello"] = "world"}: dynamic);
            global_list->add({["Hello"] = "world"}: dynamic);
            global_list->add({["Hello"] = "world"}: dynamic);

            if (std::rand(1, 100000) == 233)
                global_list->clear();

            tmp->add(arr_a[0]);
            do arr_a->remove(0);
            arr_b->add(tmp[0]);
            do tmp->remove(0);

            local_list->add(arr_a: dynamic);
            local_list->add(arr_b: dynamic);

            test_assure(arr_b[0][0] == 12345678);

            tmp->add(arr_b[0]);
            do arr_b->remove(0);
            arr_a->add(tmp[0]);
            do tmp->remove(0);

            local_list->add(arr_a: dynamic);
            local_list->add(arr_b: dynamic);

            if (std::rand(1, 100000) == 233)
                local_list->clear();


            test_assure(arr_a[0][0] == 12345678);
        }
        global_list->clear();

        std::println("test_gc_co/thread id=", id, "finished!");
    }

    func main()
    {
        global_list = [1: dynamic,2: dynamic,3: dynamic,4: dynamic,5: dynamic]mut: vec<dynamic>;
        
        do thread::create(test_gchandle_work);

        for (let (i, _): array::create(4, do nil)->iter |> iterator::enumerate) 
            do thread::create(\ = test_gc_parallel_work(i););
    }
}

test_function("test_gc.main", test_gc::main);
